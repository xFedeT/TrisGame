{"snapshots":{"C:/Users/tagli/RiderProjects/TrisGame/TrisGame/Program.cs":{"filePath":"C:/Users/tagli/RiderProjects/TrisGame/TrisGame/Program.cs","baseContent":"// Board.cs\nnamespace TrisGame\n{\n    public class Board\n    {\n        private char[,] cells = new char[3, 3];\n\n        public Board()\n        {\n            Clear();\n        }\n\n        public void Clear()\n        {\n            for (int i = 0; i < 3; i++)\n                for (int j = 0; j < 3; j++)\n                    cells[i, j] = ' ';\n        }\n\n        public bool IsEmpty(int row, int col)\n        {\n            return row >= 0 && row < 3 && col >= 0 && col < 3 && cells[row, col] == ' ';\n        }\n\n        public void Set(int row, int col, char symbol)\n        {\n            if (IsEmpty(row, col))\n                cells[row, col] = symbol;\n        }\n\n        public void Remove(int row, int col)\n        {\n            cells[row, col] = ' ';\n        }\n\n        public char Get(int row, int col)\n        {\n            return cells[row, col];\n        }\n\n        public bool HasWinner(out char winner)\n        {\n            winner = ' ';\n\n            // Check rows and columns\n            for (int i = 0; i < 3; i++)\n            {\n                if (cells[i, 0] != ' ' && cells[i, 0] == cells[i, 1] && cells[i, 1] == cells[i, 2])\n                {\n                    winner = cells[i, 0];\n                    return true;\n                }\n                if (cells[0, i] != ' ' && cells[0, i] == cells[1, i] && cells[1, i] == cells[2, i])\n                {\n                    winner = cells[0, i];\n                    return true;\n                }\n            }\n\n            // Check diagonals\n            if (cells[0, 0] != ' ' && cells[0, 0] == cells[1, 1] && cells[1, 1] == cells[2, 2])\n            {\n                winner = cells[0, 0];\n                return true;\n            }\n            if (cells[0, 2] != ' ' && cells[0, 2] == cells[1, 1] && cells[1, 1] == cells[2, 0])\n            {\n                winner = cells[0, 2];\n                return true;\n            }\n\n            return false;\n        }\n\n        public bool IsFull()\n        {\n            for (int i = 0; i < 3; i++)\n                for (int j = 0; j < 3; j++)\n                    if (cells[i, j] == ' ')\n                        return false;\n            return true;\n        }\n\n        public void Print()\n        {\n            Console.WriteLine();\n            for (int i = 0; i < 3; i++)\n            {\n                Console.Write(\" \");\n                for (int j = 0; j < 3; j++)\n                {\n                    Console.Write(cells[i, j]);\n                    if (j < 2) Console.Write(\" | \");\n                }\n                Console.WriteLine();\n                if (i < 2) Console.WriteLine(\"---|---|---\");\n            }\n            Console.WriteLine();\n        }\n    }\n}\n\n// Move.cs\nnamespace TrisGame\n{\n    public struct Move\n    {\n        public int Row { get; set; }\n        public int Col { get; set; }\n\n        public Move(int row, int col)\n        {\n            Row = row;\n            Col = col;\n        }\n    }\n\n    public interface IPlayer\n    {\n        char Symbol { get; }\n        Move GetNextMove(Board board);\n    }\n}\n\n// Human.cs\nnamespace TrisGame\n{\n    public class Human : IPlayer\n    {\n        public char Symbol { get; private set; }\n\n        public Human(char symbol)\n        {\n            Symbol = symbol;\n        }\n\n        public Move GetNextMove(Board board)\n        {\n            while (true)\n            {\n                Console.Write($\"Player {Symbol} - enter row and column (0-2): \");\n                var input = Console.ReadLine()?.Split();\n                \n                if (input?.Length == 2 && \n                    int.TryParse(input[0], out int row) && \n                    int.TryParse(input[1], out int col) &&\n                    board.IsEmpty(row, col))\n                {\n                    return new Move(row, col);\n                }\n                \n                Console.WriteLine(\"Invalid move, try again.\");\n            }\n        }\n    }\n}\n\n// Computer.cs\nnamespace TrisGame\n{\n    public class Computer : IPlayer\n    {\n        public char Symbol { get; private set; }\n        private char opponentSymbol;\n\n        public Computer(char symbol)\n        {\n            Symbol = symbol;\n            opponentSymbol = symbol == 'X' ? 'O' : 'X';\n        }\n\n        public Move GetNextMove(Board board)\n        {\n            Console.WriteLine($\"Player {Symbol} thinking...\");\n            Thread.Sleep(1000);\n\n            var bestMove = FindOptimalMove(board);\n            Console.WriteLine($\"Player {Symbol} plays: {bestMove.Row} {bestMove.Col}\");\n            Thread.Sleep(500);\n            \n            return bestMove;\n        }\n\n        private Move FindOptimalMove(Board board)\n        {\n            int bestScore = int.MinValue;\n            var bestMove = new Move(-1, -1);\n\n            for (int i = 0; i < 3; i++)\n            {\n                for (int j = 0; j < 3; j++)\n                {\n                    if (board.IsEmpty(i, j))\n                    {\n                        board.Set(i, j, Symbol);\n                        int score = Minimax(board, 0, false);\n                        board.Remove(i, j);\n\n                        if (score > bestScore)\n                        {\n                            bestScore = score;\n                            bestMove = new Move(i, j);\n                        }\n                    }\n                }\n            }\n\n            return bestMove;\n        }\n\n        private int Minimax(Board board, int depth, bool maximizing)\n        {\n            if (board.HasWinner(out char winner))\n            {\n                if (winner == Symbol) return 10 - depth;\n                if (winner == opponentSymbol) return depth - 10;\n            }\n            \n            if (board.IsFull()) return 0;\n\n            if (maximizing)\n            {\n                int maxEval = int.MinValue;\n                for (int i = 0; i < 3; i++)\n                {\n                    for (int j = 0; j < 3; j++)\n                    {\n                        if (board.IsEmpty(i, j))\n                        {\n                            board.Set(i, j, Symbol);\n                            int eval = Minimax(board, depth + 1, false);\n                            board.Remove(i, j);\n                            maxEval = Math.Max(maxEval, eval);\n                        }\n                    }\n                }\n                return maxEval;\n            }\n            else\n            {\n                int minEval = int.MaxValue;\n                for (int i = 0; i < 3; i++)\n                {\n                    for (int j = 0; j < 3; j++)\n                    {\n                        if (board.IsEmpty(i, j))\n                        {\n                            board.Set(i, j, opponentSymbol);\n                            int eval = Minimax(board, depth + 1, true);\n                            board.Remove(i, j);\n                            minEval = Math.Min(minEval, eval);\n                        }\n                    }\n                }\n                return minEval;\n            }\n        }\n    }\n}\n\n// Game.cs\nnamespace TrisGame\n{\n    public class Game\n    {\n        private Board board;\n        private IPlayer[] players;\n        private int currentPlayerIndex;\n\n        public Game()\n        {\n            board = new Board();\n            players = new IPlayer[]\n            {\n                new Human('X'),\n                new Computer('O')\n            };\n            currentPlayerIndex = 0;\n        }\n\n        public void Start()\n        {\n            Console.WriteLine(\"Tic Tac Toe\");\n            Console.WriteLine(\"Human: X, Computer: O\\n\");\n\n            while (true)\n            {\n                PlayRound();\n                \n                Console.Write(\"Play again? (y/n): \");\n                if (Console.ReadLine()?.ToLower() != \"y\")\n                    break;\n                    \n                Reset();\n            }\n        }\n\n        private void PlayRound()\n        {\n            while (true)\n            {\n                Console.Clear();\n                Console.WriteLine(\"Tic Tac Toe\\n\");\n                board.Print();\n\n                var currentPlayer = players[currentPlayerIndex];\n                var move = currentPlayer.GetNextMove(board);\n                board.Set(move.Row, move.Col, currentPlayer.Symbol);\n\n                if (board.HasWinner(out char winner))\n                {\n                    Console.Clear();\n                    Console.WriteLine(\"Tic Tac Toe\\n\");\n                    board.Print();\n                    Console.WriteLine($\"Player {winner} wins!\");\n                    break;\n                }\n\n                if (board.IsFull())\n                {\n                    Console.Clear();\n                    Console.WriteLine(\"Tic Tac Toe\\n\");\n                    board.Print();\n                    Console.WriteLine(\"It's a tie!\");\n                    break;\n                }\n\n                currentPlayerIndex = 1 - currentPlayerIndex;\n            }\n        }\n\n        private void Reset()\n        {\n            board.Clear();\n            currentPlayerIndex = 0;\n        }\n    }\n}\n\n// Program.cs\nnamespace TrisGame\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var game = new Game();\n            game.Start();\n        }\n    }","baseTimestamp":1756986044062,"deltas":[{"timestamp":1756986061884,"changes":[{"type":"DELETE","lineNumber":0,"oldContent":"// Board.cs"},{"type":"DELETE","lineNumber":3,"oldContent":"    public class Board"},{"type":"DELETE","lineNumber":4,"oldContent":"    {"},{"type":"DELETE","lineNumber":5,"oldContent":"        private char[,] cells = new char[3, 3];"},{"type":"DELETE","lineNumber":6,"oldContent":""},{"type":"DELETE","lineNumber":7,"oldContent":"        public Board()"},{"type":"DELETE","lineNumber":8,"oldContent":"        {"},{"type":"DELETE","lineNumber":9,"oldContent":"            Clear();"},{"type":"DELETE","lineNumber":10,"oldContent":"        }"},{"type":"DELETE","lineNumber":11,"oldContent":""},{"type":"DELETE","lineNumber":12,"oldContent":"        public void Clear()"},{"type":"DELETE","lineNumber":13,"oldContent":"        {"},{"type":"DELETE","lineNumber":14,"oldContent":"            for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":15,"oldContent":"                for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":16,"oldContent":"                    cells[i, j] = ' ';"},{"type":"DELETE","lineNumber":17,"oldContent":"        }"},{"type":"DELETE","lineNumber":18,"oldContent":""},{"type":"DELETE","lineNumber":19,"oldContent":"        public bool IsEmpty(int row, int col)"},{"type":"DELETE","lineNumber":20,"oldContent":"        {"},{"type":"DELETE","lineNumber":21,"oldContent":"            return row >= 0 && row < 3 && col >= 0 && col < 3 && cells[row, col] == ' ';"},{"type":"DELETE","lineNumber":22,"oldContent":"        }"},{"type":"DELETE","lineNumber":23,"oldContent":""},{"type":"DELETE","lineNumber":24,"oldContent":"        public void Set(int row, int col, char symbol)"},{"type":"DELETE","lineNumber":25,"oldContent":"        {"},{"type":"DELETE","lineNumber":26,"oldContent":"            if (IsEmpty(row, col))"},{"type":"DELETE","lineNumber":27,"oldContent":"                cells[row, col] = symbol;"},{"type":"DELETE","lineNumber":28,"oldContent":"        }"},{"type":"DELETE","lineNumber":29,"oldContent":""},{"type":"DELETE","lineNumber":30,"oldContent":"        public void Remove(int row, int col)"},{"type":"DELETE","lineNumber":31,"oldContent":"        {"},{"type":"DELETE","lineNumber":32,"oldContent":"            cells[row, col] = ' ';"},{"type":"DELETE","lineNumber":33,"oldContent":"        }"},{"type":"DELETE","lineNumber":34,"oldContent":""},{"type":"DELETE","lineNumber":35,"oldContent":"        public char Get(int row, int col)"},{"type":"DELETE","lineNumber":36,"oldContent":"        {"},{"type":"DELETE","lineNumber":37,"oldContent":"            return cells[row, col];"},{"type":"DELETE","lineNumber":38,"oldContent":"        }"},{"type":"DELETE","lineNumber":39,"oldContent":""},{"type":"DELETE","lineNumber":40,"oldContent":"        public bool HasWinner(out char winner)"},{"type":"DELETE","lineNumber":41,"oldContent":"        {"},{"type":"DELETE","lineNumber":42,"oldContent":"            winner = ' ';"},{"type":"DELETE","lineNumber":43,"oldContent":""},{"type":"DELETE","lineNumber":44,"oldContent":"            // Check rows and columns"},{"type":"DELETE","lineNumber":45,"oldContent":"            for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":46,"oldContent":"            {"},{"type":"DELETE","lineNumber":47,"oldContent":"                if (cells[i, 0] != ' ' && cells[i, 0] == cells[i, 1] && cells[i, 1] == cells[i, 2])"},{"type":"DELETE","lineNumber":48,"oldContent":"                {"},{"type":"DELETE","lineNumber":49,"oldContent":"                    winner = cells[i, 0];"},{"type":"DELETE","lineNumber":50,"oldContent":"                    return true;"},{"type":"DELETE","lineNumber":51,"oldContent":"                }"},{"type":"DELETE","lineNumber":52,"oldContent":"                if (cells[0, i] != ' ' && cells[0, i] == cells[1, i] && cells[1, i] == cells[2, i])"},{"type":"DELETE","lineNumber":53,"oldContent":"                {"},{"type":"DELETE","lineNumber":54,"oldContent":"                    winner = cells[0, i];"},{"type":"DELETE","lineNumber":55,"oldContent":"                    return true;"},{"type":"DELETE","lineNumber":56,"oldContent":"                }"},{"type":"DELETE","lineNumber":57,"oldContent":"            }"},{"type":"DELETE","lineNumber":58,"oldContent":""},{"type":"DELETE","lineNumber":59,"oldContent":"            // Check diagonals"},{"type":"DELETE","lineNumber":60,"oldContent":"            if (cells[0, 0] != ' ' && cells[0, 0] == cells[1, 1] && cells[1, 1] == cells[2, 2])"},{"type":"DELETE","lineNumber":61,"oldContent":"            {"},{"type":"DELETE","lineNumber":62,"oldContent":"                winner = cells[0, 0];"},{"type":"DELETE","lineNumber":63,"oldContent":"                return true;"},{"type":"DELETE","lineNumber":64,"oldContent":"            }"},{"type":"DELETE","lineNumber":65,"oldContent":"            if (cells[0, 2] != ' ' && cells[0, 2] == cells[1, 1] && cells[1, 1] == cells[2, 0])"},{"type":"DELETE","lineNumber":66,"oldContent":"            {"},{"type":"DELETE","lineNumber":67,"oldContent":"                winner = cells[0, 2];"},{"type":"DELETE","lineNumber":68,"oldContent":"                return true;"},{"type":"DELETE","lineNumber":69,"oldContent":"            }"},{"type":"DELETE","lineNumber":70,"oldContent":""},{"type":"DELETE","lineNumber":71,"oldContent":"            return false;"},{"type":"DELETE","lineNumber":72,"oldContent":"        }"},{"type":"DELETE","lineNumber":73,"oldContent":""},{"type":"DELETE","lineNumber":74,"oldContent":"        public bool IsFull()"},{"type":"DELETE","lineNumber":75,"oldContent":"        {"},{"type":"DELETE","lineNumber":76,"oldContent":"            for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":77,"oldContent":"                for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":78,"oldContent":"                    if (cells[i, j] == ' ')"},{"type":"DELETE","lineNumber":79,"oldContent":"                        return false;"},{"type":"DELETE","lineNumber":80,"oldContent":"            return true;"},{"type":"DELETE","lineNumber":81,"oldContent":"        }"},{"type":"DELETE","lineNumber":82,"oldContent":""},{"type":"DELETE","lineNumber":83,"oldContent":"        public void Print()"},{"type":"DELETE","lineNumber":84,"oldContent":"        {"},{"type":"DELETE","lineNumber":85,"oldContent":"            Console.WriteLine();"},{"type":"DELETE","lineNumber":86,"oldContent":"            for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":87,"oldContent":"            {"},{"type":"DELETE","lineNumber":88,"oldContent":"                Console.Write(\" \");"},{"type":"DELETE","lineNumber":89,"oldContent":"                for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":90,"oldContent":"                {"},{"type":"DELETE","lineNumber":91,"oldContent":"                    Console.Write(cells[i, j]);"},{"type":"DELETE","lineNumber":92,"oldContent":"                    if (j < 2) Console.Write(\" | \");"},{"type":"DELETE","lineNumber":93,"oldContent":"                }"},{"type":"DELETE","lineNumber":94,"oldContent":"                Console.WriteLine();"},{"type":"DELETE","lineNumber":95,"oldContent":"                if (i < 2) Console.WriteLine(\"---|---|---\");"},{"type":"DELETE","lineNumber":96,"oldContent":"            }"},{"type":"DELETE","lineNumber":97,"oldContent":"            Console.WriteLine();"},{"type":"DELETE","lineNumber":98,"oldContent":"        }"},{"type":"DELETE","lineNumber":99,"oldContent":"    }"},{"type":"DELETE","lineNumber":100,"oldContent":"}"},{"type":"DELETE","lineNumber":101,"oldContent":""},{"type":"DELETE","lineNumber":102,"oldContent":"// Move.cs"},{"type":"DELETE","lineNumber":103,"oldContent":"namespace TrisGame"},{"type":"DELETE","lineNumber":104,"oldContent":"{"},{"type":"DELETE","lineNumber":105,"oldContent":"    public struct Move"},{"type":"DELETE","lineNumber":106,"oldContent":"    {"},{"type":"DELETE","lineNumber":107,"oldContent":"        public int Row { get; set; }"},{"type":"DELETE","lineNumber":108,"oldContent":"        public int Col { get; set; }"},{"type":"DELETE","lineNumber":109,"oldContent":""},{"type":"DELETE","lineNumber":110,"oldContent":"        public Move(int row, int col)"},{"type":"DELETE","lineNumber":111,"oldContent":"        {"},{"type":"DELETE","lineNumber":112,"oldContent":"            Row = row;"},{"type":"DELETE","lineNumber":113,"oldContent":"            Col = col;"},{"type":"DELETE","lineNumber":114,"oldContent":"        }"},{"type":"DELETE","lineNumber":115,"oldContent":"    }"},{"type":"DELETE","lineNumber":116,"oldContent":""},{"type":"DELETE","lineNumber":117,"oldContent":"    public interface IPlayer"},{"type":"DELETE","lineNumber":118,"oldContent":"    {"},{"type":"DELETE","lineNumber":119,"oldContent":"        char Symbol { get; }"},{"type":"DELETE","lineNumber":120,"oldContent":"        Move GetNextMove(Board board);"},{"type":"DELETE","lineNumber":121,"oldContent":"    }"},{"type":"DELETE","lineNumber":122,"oldContent":"}"},{"type":"DELETE","lineNumber":123,"oldContent":""},{"type":"DELETE","lineNumber":124,"oldContent":"// Human.cs"},{"type":"DELETE","lineNumber":125,"oldContent":"namespace TrisGame"},{"type":"DELETE","lineNumber":126,"oldContent":"{"},{"type":"DELETE","lineNumber":127,"oldContent":"    public class Human : IPlayer"},{"type":"DELETE","lineNumber":128,"oldContent":"    {"},{"type":"DELETE","lineNumber":129,"oldContent":"        public char Symbol { get; private set; }"},{"type":"DELETE","lineNumber":130,"oldContent":""},{"type":"DELETE","lineNumber":131,"oldContent":"        public Human(char symbol)"},{"type":"DELETE","lineNumber":132,"oldContent":"        {"},{"type":"DELETE","lineNumber":133,"oldContent":"            Symbol = symbol;"},{"type":"DELETE","lineNumber":134,"oldContent":"        }"},{"type":"DELETE","lineNumber":135,"oldContent":""},{"type":"DELETE","lineNumber":136,"oldContent":"        public Move GetNextMove(Board board)"},{"type":"DELETE","lineNumber":137,"oldContent":"        {"},{"type":"DELETE","lineNumber":138,"oldContent":"            while (true)"},{"type":"DELETE","lineNumber":139,"oldContent":"            {"},{"type":"DELETE","lineNumber":140,"oldContent":"                Console.Write($\"Player {Symbol} - enter row and column (0-2): \");"},{"type":"DELETE","lineNumber":141,"oldContent":"                var input = Console.ReadLine()?.Split();"},{"type":"DELETE","lineNumber":142,"oldContent":"                "},{"type":"DELETE","lineNumber":143,"oldContent":"                if (input?.Length == 2 && "},{"type":"DELETE","lineNumber":144,"oldContent":"                    int.TryParse(input[0], out int row) && "},{"type":"DELETE","lineNumber":145,"oldContent":"                    int.TryParse(input[1], out int col) &&"},{"type":"DELETE","lineNumber":146,"oldContent":"                    board.IsEmpty(row, col))"},{"type":"DELETE","lineNumber":147,"oldContent":"                {"},{"type":"DELETE","lineNumber":148,"oldContent":"                    return new Move(row, col);"},{"type":"DELETE","lineNumber":149,"oldContent":"                }"},{"type":"DELETE","lineNumber":150,"oldContent":"                "},{"type":"DELETE","lineNumber":151,"oldContent":"                Console.WriteLine(\"Invalid move, try again.\");"},{"type":"DELETE","lineNumber":152,"oldContent":"            }"},{"type":"DELETE","lineNumber":153,"oldContent":"        }"},{"type":"DELETE","lineNumber":154,"oldContent":"    }"},{"type":"DELETE","lineNumber":155,"oldContent":"}"},{"type":"DELETE","lineNumber":156,"oldContent":""},{"type":"DELETE","lineNumber":157,"oldContent":"// Computer.cs"},{"type":"DELETE","lineNumber":158,"oldContent":"namespace TrisGame"},{"type":"DELETE","lineNumber":159,"oldContent":"{"},{"type":"DELETE","lineNumber":160,"oldContent":"    public class Computer : IPlayer"},{"type":"DELETE","lineNumber":161,"oldContent":"    {"},{"type":"DELETE","lineNumber":162,"oldContent":"        public char Symbol { get; private set; }"},{"type":"DELETE","lineNumber":163,"oldContent":"        private char opponentSymbol;"},{"type":"DELETE","lineNumber":164,"oldContent":""},{"type":"DELETE","lineNumber":165,"oldContent":"        public Computer(char symbol)"},{"type":"DELETE","lineNumber":166,"oldContent":"        {"},{"type":"DELETE","lineNumber":167,"oldContent":"            Symbol = symbol;"},{"type":"DELETE","lineNumber":168,"oldContent":"            opponentSymbol = symbol == 'X' ? 'O' : 'X';"},{"type":"DELETE","lineNumber":169,"oldContent":"        }"},{"type":"DELETE","lineNumber":170,"oldContent":""},{"type":"DELETE","lineNumber":171,"oldContent":"        public Move GetNextMove(Board board)"},{"type":"DELETE","lineNumber":172,"oldContent":"        {"},{"type":"DELETE","lineNumber":173,"oldContent":"            Console.WriteLine($\"Player {Symbol} thinking...\");"},{"type":"DELETE","lineNumber":174,"oldContent":"            Thread.Sleep(1000);"},{"type":"DELETE","lineNumber":175,"oldContent":""},{"type":"DELETE","lineNumber":176,"oldContent":"            var bestMove = FindOptimalMove(board);"},{"type":"DELETE","lineNumber":177,"oldContent":"            Console.WriteLine($\"Player {Symbol} plays: {bestMove.Row} {bestMove.Col}\");"},{"type":"DELETE","lineNumber":178,"oldContent":"            Thread.Sleep(500);"},{"type":"DELETE","lineNumber":179,"oldContent":"            "},{"type":"DELETE","lineNumber":180,"oldContent":"            return bestMove;"},{"type":"DELETE","lineNumber":181,"oldContent":"        }"},{"type":"DELETE","lineNumber":182,"oldContent":""},{"type":"DELETE","lineNumber":183,"oldContent":"        private Move FindOptimalMove(Board board)"},{"type":"DELETE","lineNumber":184,"oldContent":"        {"},{"type":"DELETE","lineNumber":185,"oldContent":"            int bestScore = int.MinValue;"},{"type":"DELETE","lineNumber":186,"oldContent":"            var bestMove = new Move(-1, -1);"},{"type":"DELETE","lineNumber":187,"oldContent":""},{"type":"DELETE","lineNumber":188,"oldContent":"            for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":189,"oldContent":"            {"},{"type":"DELETE","lineNumber":190,"oldContent":"                for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":191,"oldContent":"                {"},{"type":"DELETE","lineNumber":192,"oldContent":"                    if (board.IsEmpty(i, j))"},{"type":"DELETE","lineNumber":193,"oldContent":"                    {"},{"type":"DELETE","lineNumber":194,"oldContent":"                        board.Set(i, j, Symbol);"},{"type":"DELETE","lineNumber":195,"oldContent":"                        int score = Minimax(board, 0, false);"},{"type":"DELETE","lineNumber":196,"oldContent":"                        board.Remove(i, j);"},{"type":"DELETE","lineNumber":197,"oldContent":""},{"type":"DELETE","lineNumber":198,"oldContent":"                        if (score > bestScore)"},{"type":"DELETE","lineNumber":199,"oldContent":"                        {"},{"type":"DELETE","lineNumber":200,"oldContent":"                            bestScore = score;"},{"type":"DELETE","lineNumber":201,"oldContent":"                            bestMove = new Move(i, j);"},{"type":"DELETE","lineNumber":202,"oldContent":"                        }"},{"type":"DELETE","lineNumber":203,"oldContent":"                    }"},{"type":"DELETE","lineNumber":204,"oldContent":"                }"},{"type":"DELETE","lineNumber":205,"oldContent":"            }"},{"type":"DELETE","lineNumber":206,"oldContent":""},{"type":"DELETE","lineNumber":207,"oldContent":"            return bestMove;"},{"type":"DELETE","lineNumber":208,"oldContent":"        }"},{"type":"DELETE","lineNumber":209,"oldContent":""},{"type":"DELETE","lineNumber":210,"oldContent":"        private int Minimax(Board board, int depth, bool maximizing)"},{"type":"DELETE","lineNumber":211,"oldContent":"        {"},{"type":"DELETE","lineNumber":212,"oldContent":"            if (board.HasWinner(out char winner))"},{"type":"DELETE","lineNumber":213,"oldContent":"            {"},{"type":"DELETE","lineNumber":214,"oldContent":"                if (winner == Symbol) return 10 - depth;"},{"type":"DELETE","lineNumber":215,"oldContent":"                if (winner == opponentSymbol) return depth - 10;"},{"type":"DELETE","lineNumber":216,"oldContent":"            }"},{"type":"DELETE","lineNumber":217,"oldContent":"            "},{"type":"DELETE","lineNumber":218,"oldContent":"            if (board.IsFull()) return 0;"},{"type":"DELETE","lineNumber":219,"oldContent":""},{"type":"DELETE","lineNumber":220,"oldContent":"            if (maximizing)"},{"type":"DELETE","lineNumber":221,"oldContent":"            {"},{"type":"DELETE","lineNumber":222,"oldContent":"                int maxEval = int.MinValue;"},{"type":"DELETE","lineNumber":223,"oldContent":"                for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":224,"oldContent":"                {"},{"type":"DELETE","lineNumber":225,"oldContent":"                    for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":226,"oldContent":"                    {"},{"type":"DELETE","lineNumber":227,"oldContent":"                        if (board.IsEmpty(i, j))"},{"type":"DELETE","lineNumber":228,"oldContent":"                        {"},{"type":"DELETE","lineNumber":229,"oldContent":"                            board.Set(i, j, Symbol);"},{"type":"DELETE","lineNumber":230,"oldContent":"                            int eval = Minimax(board, depth + 1, false);"},{"type":"DELETE","lineNumber":231,"oldContent":"                            board.Remove(i, j);"},{"type":"DELETE","lineNumber":232,"oldContent":"                            maxEval = Math.Max(maxEval, eval);"},{"type":"DELETE","lineNumber":233,"oldContent":"                        }"},{"type":"DELETE","lineNumber":234,"oldContent":"                    }"},{"type":"DELETE","lineNumber":235,"oldContent":"                }"},{"type":"DELETE","lineNumber":236,"oldContent":"                return maxEval;"},{"type":"DELETE","lineNumber":237,"oldContent":"            }"},{"type":"DELETE","lineNumber":238,"oldContent":"            else"},{"type":"DELETE","lineNumber":239,"oldContent":"            {"},{"type":"DELETE","lineNumber":240,"oldContent":"                int minEval = int.MaxValue;"},{"type":"DELETE","lineNumber":241,"oldContent":"                for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":242,"oldContent":"                {"},{"type":"DELETE","lineNumber":243,"oldContent":"                    for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":244,"oldContent":"                    {"},{"type":"DELETE","lineNumber":245,"oldContent":"                        if (board.IsEmpty(i, j))"},{"type":"DELETE","lineNumber":246,"oldContent":"                        {"},{"type":"DELETE","lineNumber":247,"oldContent":"                            board.Set(i, j, opponentSymbol);"},{"type":"DELETE","lineNumber":248,"oldContent":"                            int eval = Minimax(board, depth + 1, true);"},{"type":"DELETE","lineNumber":249,"oldContent":"                            board.Remove(i, j);"},{"type":"DELETE","lineNumber":250,"oldContent":"                            minEval = Math.Min(minEval, eval);"},{"type":"DELETE","lineNumber":251,"oldContent":"                        }"},{"type":"DELETE","lineNumber":252,"oldContent":"                    }"},{"type":"DELETE","lineNumber":253,"oldContent":"                }"},{"type":"DELETE","lineNumber":254,"oldContent":"                return minEval;"},{"type":"DELETE","lineNumber":255,"oldContent":"            }"},{"type":"DELETE","lineNumber":256,"oldContent":"        }"},{"type":"DELETE","lineNumber":257,"oldContent":"    }"},{"type":"DELETE","lineNumber":258,"oldContent":"}"},{"type":"DELETE","lineNumber":259,"oldContent":""},{"type":"DELETE","lineNumber":260,"oldContent":"// Game.cs"},{"type":"DELETE","lineNumber":261,"oldContent":"namespace TrisGame"},{"type":"DELETE","lineNumber":262,"oldContent":"{"},{"type":"DELETE","lineNumber":263,"oldContent":"    public class Game"},{"type":"DELETE","lineNumber":264,"oldContent":"    {"},{"type":"DELETE","lineNumber":265,"oldContent":"        private Board board;"},{"type":"DELETE","lineNumber":266,"oldContent":"        private IPlayer[] players;"},{"type":"DELETE","lineNumber":267,"oldContent":"        private int currentPlayerIndex;"},{"type":"DELETE","lineNumber":268,"oldContent":""},{"type":"DELETE","lineNumber":269,"oldContent":"        public Game()"},{"type":"DELETE","lineNumber":270,"oldContent":"        {"},{"type":"DELETE","lineNumber":271,"oldContent":"            board = new Board();"},{"type":"DELETE","lineNumber":272,"oldContent":"            players = new IPlayer[]"},{"type":"DELETE","lineNumber":273,"oldContent":"            {"},{"type":"DELETE","lineNumber":274,"oldContent":"                new Human('X'),"},{"type":"DELETE","lineNumber":275,"oldContent":"                new Computer('O')"},{"type":"DELETE","lineNumber":276,"oldContent":"            };"},{"type":"DELETE","lineNumber":277,"oldContent":"            currentPlayerIndex = 0;"},{"type":"DELETE","lineNumber":278,"oldContent":"        }"},{"type":"DELETE","lineNumber":279,"oldContent":""},{"type":"DELETE","lineNumber":280,"oldContent":"        public void Start()"},{"type":"DELETE","lineNumber":281,"oldContent":"        {"},{"type":"DELETE","lineNumber":282,"oldContent":"            Console.WriteLine(\"Tic Tac Toe\");"},{"type":"DELETE","lineNumber":283,"oldContent":"            Console.WriteLine(\"Human: X, Computer: O\\n\");"},{"type":"DELETE","lineNumber":284,"oldContent":""},{"type":"DELETE","lineNumber":285,"oldContent":"            while (true)"},{"type":"DELETE","lineNumber":286,"oldContent":"            {"},{"type":"DELETE","lineNumber":287,"oldContent":"                PlayRound();"},{"type":"DELETE","lineNumber":288,"oldContent":"                "},{"type":"DELETE","lineNumber":289,"oldContent":"                Console.Write(\"Play again? (y/n): \");"},{"type":"DELETE","lineNumber":290,"oldContent":"                if (Console.ReadLine()?.ToLower() != \"y\")"},{"type":"DELETE","lineNumber":291,"oldContent":"                    break;"},{"type":"DELETE","lineNumber":292,"oldContent":"                    "},{"type":"DELETE","lineNumber":293,"oldContent":"                Reset();"},{"type":"DELETE","lineNumber":294,"oldContent":"            }"},{"type":"DELETE","lineNumber":295,"oldContent":"        }"},{"type":"DELETE","lineNumber":296,"oldContent":""},{"type":"DELETE","lineNumber":297,"oldContent":"        private void PlayRound()"},{"type":"DELETE","lineNumber":298,"oldContent":"        {"},{"type":"DELETE","lineNumber":299,"oldContent":"            while (true)"},{"type":"DELETE","lineNumber":300,"oldContent":"            {"},{"type":"DELETE","lineNumber":301,"oldContent":"                Console.Clear();"},{"type":"DELETE","lineNumber":302,"oldContent":"                Console.WriteLine(\"Tic Tac Toe\\n\");"},{"type":"DELETE","lineNumber":303,"oldContent":"                board.Print();"},{"type":"DELETE","lineNumber":304,"oldContent":""},{"type":"DELETE","lineNumber":305,"oldContent":"                var currentPlayer = players[currentPlayerIndex];"},{"type":"DELETE","lineNumber":306,"oldContent":"                var move = currentPlayer.GetNextMove(board);"},{"type":"DELETE","lineNumber":307,"oldContent":"                board.Set(move.Row, move.Col, currentPlayer.Symbol);"},{"type":"DELETE","lineNumber":308,"oldContent":""},{"type":"DELETE","lineNumber":309,"oldContent":"                if (board.HasWinner(out char winner))"},{"type":"DELETE","lineNumber":310,"oldContent":"                {"},{"type":"DELETE","lineNumber":311,"oldContent":"                    Console.Clear();"},{"type":"DELETE","lineNumber":312,"oldContent":"                    Console.WriteLine(\"Tic Tac Toe\\n\");"},{"type":"DELETE","lineNumber":313,"oldContent":"                    board.Print();"},{"type":"DELETE","lineNumber":314,"oldContent":"                    Console.WriteLine($\"Player {winner} wins!\");"},{"type":"DELETE","lineNumber":315,"oldContent":"                    break;"},{"type":"DELETE","lineNumber":316,"oldContent":"                }"},{"type":"DELETE","lineNumber":317,"oldContent":""},{"type":"DELETE","lineNumber":318,"oldContent":"                if (board.IsFull())"},{"type":"DELETE","lineNumber":319,"oldContent":"                {"},{"type":"DELETE","lineNumber":320,"oldContent":"                    Console.Clear();"},{"type":"DELETE","lineNumber":321,"oldContent":"                    Console.WriteLine(\"Tic Tac Toe\\n\");"},{"type":"DELETE","lineNumber":322,"oldContent":"                    board.Print();"},{"type":"DELETE","lineNumber":323,"oldContent":"                    Console.WriteLine(\"It's a tie!\");"},{"type":"DELETE","lineNumber":324,"oldContent":"                    break;"},{"type":"DELETE","lineNumber":325,"oldContent":"                }"},{"type":"DELETE","lineNumber":326,"oldContent":""},{"type":"DELETE","lineNumber":327,"oldContent":"                currentPlayerIndex = 1 - currentPlayerIndex;"},{"type":"DELETE","lineNumber":328,"oldContent":"            }"},{"type":"DELETE","lineNumber":329,"oldContent":"        }"},{"type":"DELETE","lineNumber":330,"oldContent":""},{"type":"DELETE","lineNumber":331,"oldContent":"        private void Reset()"},{"type":"DELETE","lineNumber":332,"oldContent":"        {"},{"type":"DELETE","lineNumber":333,"oldContent":"            board.Clear();"},{"type":"DELETE","lineNumber":334,"oldContent":"            currentPlayerIndex = 0;"},{"type":"DELETE","lineNumber":335,"oldContent":"        }"},{"type":"DELETE","lineNumber":336,"oldContent":"    }"},{"type":"DELETE","lineNumber":337,"oldContent":"}"},{"type":"DELETE","lineNumber":338,"oldContent":""},{"type":"DELETE","lineNumber":339,"oldContent":"// Program.cs"},{"type":"DELETE","lineNumber":340,"oldContent":"namespace TrisGame"},{"type":"DELETE","lineNumber":341,"oldContent":"{"}]},{"timestamp":1756986239770,"changes":[{"type":"INSERT","lineNumber":10,"content":"}"}]}]},"C:/Users/tagli/RiderProjects/TrisGame/TrisGame/Game.cs":{"filePath":"C:/Users/tagli/RiderProjects/TrisGame/TrisGame/Game.cs","baseContent":"// Board.cs\nnamespace TrisGame\n{\n    public class Board\n    {\n        private char[,] cells = new char[3, 3];\n\n        public Board()\n        {\n            Clear();\n        }\n\n        public void Clear()\n        {\n            for (int i = 0; i < 3; i++)\n                for (int j = 0; j < 3; j++)\n                    cells[i, j] = ' ';\n        }\n\n        public bool IsEmpty(int row, int col)\n        {\n            return row >= 0 && row < 3 && col >= 0 && col < 3 && cells[row, col] == ' ';\n        }\n\n        public void Set(int row, int col, char symbol)\n        {\n            if (IsEmpty(row, col))\n                cells[row, col] = symbol;\n        }\n\n        public void Remove(int row, int col)\n        {\n            cells[row, col] = ' ';\n        }\n\n        public char Get(int row, int col)\n        {\n            return cells[row, col];\n        }\n\n        public bool HasWinner(out char winner)\n        {\n            winner = ' ';\n\n            // Check rows and columns\n            for (int i = 0; i < 3; i++)\n            {\n                if (cells[i, 0] != ' ' && cells[i, 0] == cells[i, 1] && cells[i, 1] == cells[i, 2])\n                {\n                    winner = cells[i, 0];\n                    return true;\n                }\n                if (cells[0, i] != ' ' && cells[0, i] == cells[1, i] && cells[1, i] == cells[2, i])\n                {\n                    winner = cells[0, i];\n                    return true;\n                }\n            }\n\n            // Check diagonals\n            if (cells[0, 0] != ' ' && cells[0, 0] == cells[1, 1] && cells[1, 1] == cells[2, 2])\n            {\n                winner = cells[0, 0];\n                return true;\n            }\n            if (cells[0, 2] != ' ' && cells[0, 2] == cells[1, 1] && cells[1, 1] == cells[2, 0])\n            {\n                winner = cells[0, 2];\n                return true;\n            }\n\n            return false;\n        }\n\n        public bool IsFull()\n        {\n            for (int i = 0; i < 3; i++)\n                for (int j = 0; j < 3; j++)\n                    if (cells[i, j] == ' ')\n                        return false;\n            return true;\n        }\n\n        public void Print()\n        {\n            Console.WriteLine();\n            for (int i = 0; i < 3; i++)\n            {\n                Console.Write(\" \");\n                for (int j = 0; j < 3; j++)\n                {\n                    Console.Write(cells[i, j]);\n                    if (j < 2) Console.Write(\" | \");\n                }\n                Console.WriteLine();\n                if (i < 2) Console.WriteLine(\"---|---|---\");\n            }\n            Console.WriteLine();\n        }\n    }\n}\n\n// Move.cs\nnamespace TrisGame\n{\n    public struct Move\n    {\n        public int Row { get; set; }\n        public int Col { get; set; }\n\n        public Move(int row, int col)\n        {\n            Row = row;\n            Col = col;\n        }\n    }\n\n    public interface IPlayer\n    {\n        char Symbol { get; }\n        Move GetNextMove(Board board);\n    }\n}\n\n// Human.cs\nnamespace TrisGame\n{\n    public class Human : IPlayer\n    {\n        public char Symbol { get; private set; }\n\n        public Human(char symbol)\n        {\n            Symbol = symbol;\n        }\n\n        public Move GetNextMove(Board board)\n        {\n            while (true)\n            {\n                Console.Write($\"Player {Symbol} - enter row and column (0-2): \");\n                var input = Console.ReadLine()?.Split();\n                \n                if (input?.Length == 2 && \n                    int.TryParse(input[0], out int row) && \n                    int.TryParse(input[1], out int col) &&\n                    board.IsEmpty(row, col))\n                {\n                    return new Move(row, col);\n                }\n                \n                Console.WriteLine(\"Invalid move, try again.\");\n            }\n        }\n    }\n}\n\n// Computer.cs\nnamespace TrisGame\n{\n    public class Computer : IPlayer\n    {\n        public char Symbol { get; private set; }\n        private char opponentSymbol;\n\n        public Computer(char symbol)\n        {\n            Symbol = symbol;\n            opponentSymbol = symbol == 'X' ? 'O' : 'X';\n        }\n\n        public Move GetNextMove(Board board)\n        {\n            Console.WriteLine($\"Player {Symbol} thinking...\");\n            Thread.Sleep(1000);\n\n            var bestMove = FindOptimalMove(board);\n            Console.WriteLine($\"Player {Symbol} plays: {bestMove.Row} {bestMove.Col}\");\n            Thread.Sleep(500);\n            \n            return bestMove;\n        }\n\n        private Move FindOptimalMove(Board board)\n        {\n            int bestScore = int.MinValue;\n            var bestMove = new Move(-1, -1);\n\n            for (int i = 0; i < 3; i++)\n            {\n                for (int j = 0; j < 3; j++)\n                {\n                    if (board.IsEmpty(i, j))\n                    {\n                        board.Set(i, j, Symbol);\n                        int score = Minimax(board, 0, false);\n                        board.Remove(i, j);\n\n                        if (score > bestScore)\n                        {\n                            bestScore = score;\n                            bestMove = new Move(i, j);\n                        }\n                    }\n                }\n            }\n\n            return bestMove;\n        }\n\n        private int Minimax(Board board, int depth, bool maximizing)\n        {\n            if (board.HasWinner(out char winner))\n            {\n                if (winner == Symbol) return 10 - depth;\n                if (winner == opponentSymbol) return depth - 10;\n            }\n            \n            if (board.IsFull()) return 0;\n\n            if (maximizing)\n            {\n                int maxEval = int.MinValue;\n                for (int i = 0; i < 3; i++)\n                {\n                    for (int j = 0; j < 3; j++)\n                    {\n                        if (board.IsEmpty(i, j))\n                        {\n                            board.Set(i, j, Symbol);\n                            int eval = Minimax(board, depth + 1, false);\n                            board.Remove(i, j);\n                            maxEval = Math.Max(maxEval, eval);\n                        }\n                    }\n                }\n                return maxEval;\n            }\n            else\n            {\n                int minEval = int.MaxValue;\n                for (int i = 0; i < 3; i++)\n                {\n                    for (int j = 0; j < 3; j++)\n                    {\n                        if (board.IsEmpty(i, j))\n                        {\n                            board.Set(i, j, opponentSymbol);\n                            int eval = Minimax(board, depth + 1, true);\n                            board.Remove(i, j);\n                            minEval = Math.Min(minEval, eval);\n                        }\n                    }\n                }\n                return minEval;\n            }\n        }\n    }\n}\n\n// Game.cs\nnamespace TrisGame\n{\n    public class Game\n    {\n        private Board board;\n        private IPlayer[] players;\n        private int currentPlayerIndex;\n\n        public Game()\n        {\n            board = new Board();\n            players = new IPlayer[]\n            {\n                new Human('X'),\n                new Computer('O')\n            };\n            currentPlayerIndex = 0;\n        }\n\n        public void Start()\n        {\n            Console.WriteLine(\"Tic Tac Toe\");\n            Console.WriteLine(\"Human: X, Computer: O\\n\");\n\n            while (true)\n            {\n                PlayRound();\n                \n                Console.Write(\"Play again? (y/n): \");\n                if (Console.ReadLine()?.ToLower() != \"y\")\n                    break;\n                    \n                Reset();\n            }\n        }\n\n        private void PlayRound()\n        {\n            while (true)\n            {\n                Console.Clear();\n                Console.WriteLine(\"Tic Tac Toe\\n\");\n                board.Print();\n\n                var currentPlayer = players[currentPlayerIndex];\n                var move = currentPlayer.GetNextMove(board);\n                board.Set(move.Row, move.Col, currentPlayer.Symbol);\n\n                if (board.HasWinner(out char winner))\n                {\n                    Console.Clear();\n                    Console.WriteLine(\"Tic Tac Toe\\n\");\n                    board.Print();\n                    Console.WriteLine($\"Player {winner} wins!\");\n                    break;\n                }\n\n                if (board.IsFull())\n                {\n                    Console.Clear();\n                    Console.WriteLine(\"Tic Tac Toe\\n\");\n                    board.Print();\n                    Console.WriteLine(\"It's a tie!\");\n                    break;\n                }\n\n                currentPlayerIndex = 1 - currentPlayerIndex;\n            }\n        }\n\n        private void Reset()\n        {\n            board.Clear();\n            currentPlayerIndex = 0;\n        }\n    }\n}","baseTimestamp":1756986069944,"deltas":[{"timestamp":1756986086608,"changes":[{"type":"DELETE","lineNumber":0,"oldContent":"// Board.cs"},{"type":"DELETE","lineNumber":3,"oldContent":"    public class Board"},{"type":"DELETE","lineNumber":4,"oldContent":"    {"},{"type":"DELETE","lineNumber":5,"oldContent":"        private char[,] cells = new char[3, 3];"},{"type":"DELETE","lineNumber":6,"oldContent":""},{"type":"DELETE","lineNumber":7,"oldContent":"        public Board()"},{"type":"DELETE","lineNumber":8,"oldContent":"        {"},{"type":"DELETE","lineNumber":9,"oldContent":"            Clear();"},{"type":"DELETE","lineNumber":10,"oldContent":"        }"},{"type":"DELETE","lineNumber":11,"oldContent":""},{"type":"DELETE","lineNumber":12,"oldContent":"        public void Clear()"},{"type":"DELETE","lineNumber":13,"oldContent":"        {"},{"type":"DELETE","lineNumber":14,"oldContent":"            for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":15,"oldContent":"                for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":16,"oldContent":"                    cells[i, j] = ' ';"},{"type":"DELETE","lineNumber":17,"oldContent":"        }"},{"type":"DELETE","lineNumber":18,"oldContent":""},{"type":"DELETE","lineNumber":19,"oldContent":"        public bool IsEmpty(int row, int col)"},{"type":"DELETE","lineNumber":20,"oldContent":"        {"},{"type":"DELETE","lineNumber":21,"oldContent":"            return row >= 0 && row < 3 && col >= 0 && col < 3 && cells[row, col] == ' ';"},{"type":"DELETE","lineNumber":22,"oldContent":"        }"},{"type":"DELETE","lineNumber":23,"oldContent":""},{"type":"DELETE","lineNumber":24,"oldContent":"        public void Set(int row, int col, char symbol)"},{"type":"DELETE","lineNumber":25,"oldContent":"        {"},{"type":"DELETE","lineNumber":26,"oldContent":"            if (IsEmpty(row, col))"},{"type":"DELETE","lineNumber":27,"oldContent":"                cells[row, col] = symbol;"},{"type":"DELETE","lineNumber":28,"oldContent":"        }"},{"type":"DELETE","lineNumber":29,"oldContent":""},{"type":"DELETE","lineNumber":30,"oldContent":"        public void Remove(int row, int col)"},{"type":"DELETE","lineNumber":31,"oldContent":"        {"},{"type":"DELETE","lineNumber":32,"oldContent":"            cells[row, col] = ' ';"},{"type":"DELETE","lineNumber":33,"oldContent":"        }"},{"type":"DELETE","lineNumber":34,"oldContent":""},{"type":"DELETE","lineNumber":35,"oldContent":"        public char Get(int row, int col)"},{"type":"DELETE","lineNumber":36,"oldContent":"        {"},{"type":"DELETE","lineNumber":37,"oldContent":"            return cells[row, col];"},{"type":"DELETE","lineNumber":38,"oldContent":"        }"},{"type":"DELETE","lineNumber":39,"oldContent":""},{"type":"DELETE","lineNumber":40,"oldContent":"        public bool HasWinner(out char winner)"},{"type":"DELETE","lineNumber":41,"oldContent":"        {"},{"type":"DELETE","lineNumber":42,"oldContent":"            winner = ' ';"},{"type":"DELETE","lineNumber":43,"oldContent":""},{"type":"DELETE","lineNumber":44,"oldContent":"            // Check rows and columns"},{"type":"DELETE","lineNumber":45,"oldContent":"            for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":46,"oldContent":"            {"},{"type":"DELETE","lineNumber":47,"oldContent":"                if (cells[i, 0] != ' ' && cells[i, 0] == cells[i, 1] && cells[i, 1] == cells[i, 2])"},{"type":"DELETE","lineNumber":48,"oldContent":"                {"},{"type":"DELETE","lineNumber":49,"oldContent":"                    winner = cells[i, 0];"},{"type":"DELETE","lineNumber":50,"oldContent":"                    return true;"},{"type":"DELETE","lineNumber":51,"oldContent":"                }"},{"type":"DELETE","lineNumber":52,"oldContent":"                if (cells[0, i] != ' ' && cells[0, i] == cells[1, i] && cells[1, i] == cells[2, i])"},{"type":"DELETE","lineNumber":53,"oldContent":"                {"},{"type":"DELETE","lineNumber":54,"oldContent":"                    winner = cells[0, i];"},{"type":"DELETE","lineNumber":55,"oldContent":"                    return true;"},{"type":"DELETE","lineNumber":56,"oldContent":"                }"},{"type":"DELETE","lineNumber":57,"oldContent":"            }"},{"type":"DELETE","lineNumber":58,"oldContent":""},{"type":"DELETE","lineNumber":59,"oldContent":"            // Check diagonals"},{"type":"DELETE","lineNumber":60,"oldContent":"            if (cells[0, 0] != ' ' && cells[0, 0] == cells[1, 1] && cells[1, 1] == cells[2, 2])"},{"type":"DELETE","lineNumber":61,"oldContent":"            {"},{"type":"DELETE","lineNumber":62,"oldContent":"                winner = cells[0, 0];"},{"type":"DELETE","lineNumber":63,"oldContent":"                return true;"},{"type":"DELETE","lineNumber":64,"oldContent":"            }"},{"type":"DELETE","lineNumber":65,"oldContent":"            if (cells[0, 2] != ' ' && cells[0, 2] == cells[1, 1] && cells[1, 1] == cells[2, 0])"},{"type":"DELETE","lineNumber":66,"oldContent":"            {"},{"type":"DELETE","lineNumber":67,"oldContent":"                winner = cells[0, 2];"},{"type":"DELETE","lineNumber":68,"oldContent":"                return true;"},{"type":"DELETE","lineNumber":69,"oldContent":"            }"},{"type":"DELETE","lineNumber":70,"oldContent":""},{"type":"DELETE","lineNumber":71,"oldContent":"            return false;"},{"type":"DELETE","lineNumber":72,"oldContent":"        }"},{"type":"DELETE","lineNumber":73,"oldContent":""},{"type":"DELETE","lineNumber":74,"oldContent":"        public bool IsFull()"},{"type":"DELETE","lineNumber":75,"oldContent":"        {"},{"type":"DELETE","lineNumber":76,"oldContent":"            for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":77,"oldContent":"                for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":78,"oldContent":"                    if (cells[i, j] == ' ')"},{"type":"DELETE","lineNumber":79,"oldContent":"                        return false;"},{"type":"DELETE","lineNumber":80,"oldContent":"            return true;"},{"type":"DELETE","lineNumber":81,"oldContent":"        }"},{"type":"DELETE","lineNumber":82,"oldContent":""},{"type":"DELETE","lineNumber":83,"oldContent":"        public void Print()"},{"type":"DELETE","lineNumber":84,"oldContent":"        {"},{"type":"DELETE","lineNumber":85,"oldContent":"            Console.WriteLine();"},{"type":"DELETE","lineNumber":86,"oldContent":"            for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":87,"oldContent":"            {"},{"type":"DELETE","lineNumber":88,"oldContent":"                Console.Write(\" \");"},{"type":"DELETE","lineNumber":89,"oldContent":"                for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":90,"oldContent":"                {"},{"type":"DELETE","lineNumber":91,"oldContent":"                    Console.Write(cells[i, j]);"},{"type":"DELETE","lineNumber":92,"oldContent":"                    if (j < 2) Console.Write(\" | \");"},{"type":"DELETE","lineNumber":93,"oldContent":"                }"},{"type":"DELETE","lineNumber":94,"oldContent":"                Console.WriteLine();"},{"type":"DELETE","lineNumber":95,"oldContent":"                if (i < 2) Console.WriteLine(\"---|---|---\");"},{"type":"DELETE","lineNumber":96,"oldContent":"            }"},{"type":"DELETE","lineNumber":97,"oldContent":"            Console.WriteLine();"},{"type":"DELETE","lineNumber":98,"oldContent":"        }"},{"type":"DELETE","lineNumber":99,"oldContent":"    }"},{"type":"DELETE","lineNumber":100,"oldContent":"}"},{"type":"DELETE","lineNumber":101,"oldContent":""},{"type":"DELETE","lineNumber":102,"oldContent":"// Move.cs"},{"type":"DELETE","lineNumber":103,"oldContent":"namespace TrisGame"},{"type":"DELETE","lineNumber":104,"oldContent":"{"},{"type":"DELETE","lineNumber":105,"oldContent":"    public struct Move"},{"type":"DELETE","lineNumber":106,"oldContent":"    {"},{"type":"DELETE","lineNumber":107,"oldContent":"        public int Row { get; set; }"},{"type":"DELETE","lineNumber":108,"oldContent":"        public int Col { get; set; }"},{"type":"DELETE","lineNumber":109,"oldContent":""},{"type":"DELETE","lineNumber":110,"oldContent":"        public Move(int row, int col)"},{"type":"DELETE","lineNumber":111,"oldContent":"        {"},{"type":"DELETE","lineNumber":112,"oldContent":"            Row = row;"},{"type":"DELETE","lineNumber":113,"oldContent":"            Col = col;"},{"type":"DELETE","lineNumber":114,"oldContent":"        }"},{"type":"DELETE","lineNumber":115,"oldContent":"    }"},{"type":"DELETE","lineNumber":116,"oldContent":""},{"type":"DELETE","lineNumber":117,"oldContent":"    public interface IPlayer"},{"type":"DELETE","lineNumber":118,"oldContent":"    {"},{"type":"DELETE","lineNumber":119,"oldContent":"        char Symbol { get; }"},{"type":"DELETE","lineNumber":120,"oldContent":"        Move GetNextMove(Board board);"},{"type":"DELETE","lineNumber":121,"oldContent":"    }"},{"type":"DELETE","lineNumber":122,"oldContent":"}"},{"type":"DELETE","lineNumber":123,"oldContent":""},{"type":"DELETE","lineNumber":124,"oldContent":"// Human.cs"},{"type":"DELETE","lineNumber":125,"oldContent":"namespace TrisGame"},{"type":"DELETE","lineNumber":126,"oldContent":"{"},{"type":"DELETE","lineNumber":127,"oldContent":"    public class Human : IPlayer"},{"type":"DELETE","lineNumber":128,"oldContent":"    {"},{"type":"DELETE","lineNumber":129,"oldContent":"        public char Symbol { get; private set; }"},{"type":"DELETE","lineNumber":130,"oldContent":""},{"type":"DELETE","lineNumber":131,"oldContent":"        public Human(char symbol)"},{"type":"DELETE","lineNumber":132,"oldContent":"        {"},{"type":"DELETE","lineNumber":133,"oldContent":"            Symbol = symbol;"},{"type":"DELETE","lineNumber":134,"oldContent":"        }"},{"type":"DELETE","lineNumber":135,"oldContent":""},{"type":"DELETE","lineNumber":136,"oldContent":"        public Move GetNextMove(Board board)"},{"type":"DELETE","lineNumber":137,"oldContent":"        {"},{"type":"DELETE","lineNumber":138,"oldContent":"            while (true)"},{"type":"DELETE","lineNumber":139,"oldContent":"            {"},{"type":"DELETE","lineNumber":140,"oldContent":"                Console.Write($\"Player {Symbol} - enter row and column (0-2): \");"},{"type":"DELETE","lineNumber":141,"oldContent":"                var input = Console.ReadLine()?.Split();"},{"type":"DELETE","lineNumber":142,"oldContent":"                "},{"type":"DELETE","lineNumber":143,"oldContent":"                if (input?.Length == 2 && "},{"type":"DELETE","lineNumber":144,"oldContent":"                    int.TryParse(input[0], out int row) && "},{"type":"DELETE","lineNumber":145,"oldContent":"                    int.TryParse(input[1], out int col) &&"},{"type":"DELETE","lineNumber":146,"oldContent":"                    board.IsEmpty(row, col))"},{"type":"DELETE","lineNumber":147,"oldContent":"                {"},{"type":"DELETE","lineNumber":148,"oldContent":"                    return new Move(row, col);"},{"type":"DELETE","lineNumber":149,"oldContent":"                }"},{"type":"DELETE","lineNumber":150,"oldContent":"                "},{"type":"DELETE","lineNumber":151,"oldContent":"                Console.WriteLine(\"Invalid move, try again.\");"},{"type":"DELETE","lineNumber":152,"oldContent":"            }"},{"type":"DELETE","lineNumber":153,"oldContent":"        }"},{"type":"DELETE","lineNumber":154,"oldContent":"    }"},{"type":"DELETE","lineNumber":155,"oldContent":"}"},{"type":"DELETE","lineNumber":156,"oldContent":""},{"type":"DELETE","lineNumber":157,"oldContent":"// Computer.cs"},{"type":"DELETE","lineNumber":158,"oldContent":"namespace TrisGame"},{"type":"DELETE","lineNumber":159,"oldContent":"{"},{"type":"DELETE","lineNumber":160,"oldContent":"    public class Computer : IPlayer"},{"type":"DELETE","lineNumber":161,"oldContent":"    {"},{"type":"DELETE","lineNumber":162,"oldContent":"        public char Symbol { get; private set; }"},{"type":"DELETE","lineNumber":163,"oldContent":"        private char opponentSymbol;"},{"type":"DELETE","lineNumber":164,"oldContent":""},{"type":"DELETE","lineNumber":165,"oldContent":"        public Computer(char symbol)"},{"type":"DELETE","lineNumber":166,"oldContent":"        {"},{"type":"DELETE","lineNumber":167,"oldContent":"            Symbol = symbol;"},{"type":"DELETE","lineNumber":168,"oldContent":"            opponentSymbol = symbol == 'X' ? 'O' : 'X';"},{"type":"DELETE","lineNumber":169,"oldContent":"        }"},{"type":"DELETE","lineNumber":170,"oldContent":""},{"type":"DELETE","lineNumber":171,"oldContent":"        public Move GetNextMove(Board board)"},{"type":"DELETE","lineNumber":172,"oldContent":"        {"},{"type":"DELETE","lineNumber":173,"oldContent":"            Console.WriteLine($\"Player {Symbol} thinking...\");"},{"type":"DELETE","lineNumber":174,"oldContent":"            Thread.Sleep(1000);"},{"type":"DELETE","lineNumber":175,"oldContent":""},{"type":"DELETE","lineNumber":176,"oldContent":"            var bestMove = FindOptimalMove(board);"},{"type":"DELETE","lineNumber":177,"oldContent":"            Console.WriteLine($\"Player {Symbol} plays: {bestMove.Row} {bestMove.Col}\");"},{"type":"DELETE","lineNumber":178,"oldContent":"            Thread.Sleep(500);"},{"type":"DELETE","lineNumber":179,"oldContent":"            "},{"type":"DELETE","lineNumber":180,"oldContent":"            return bestMove;"},{"type":"DELETE","lineNumber":181,"oldContent":"        }"},{"type":"DELETE","lineNumber":182,"oldContent":""},{"type":"DELETE","lineNumber":183,"oldContent":"        private Move FindOptimalMove(Board board)"},{"type":"DELETE","lineNumber":184,"oldContent":"        {"},{"type":"DELETE","lineNumber":185,"oldContent":"            int bestScore = int.MinValue;"},{"type":"DELETE","lineNumber":186,"oldContent":"            var bestMove = new Move(-1, -1);"},{"type":"DELETE","lineNumber":187,"oldContent":""},{"type":"DELETE","lineNumber":188,"oldContent":"            for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":189,"oldContent":"            {"},{"type":"DELETE","lineNumber":190,"oldContent":"                for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":191,"oldContent":"                {"},{"type":"DELETE","lineNumber":192,"oldContent":"                    if (board.IsEmpty(i, j))"},{"type":"DELETE","lineNumber":193,"oldContent":"                    {"},{"type":"DELETE","lineNumber":194,"oldContent":"                        board.Set(i, j, Symbol);"},{"type":"DELETE","lineNumber":195,"oldContent":"                        int score = Minimax(board, 0, false);"},{"type":"DELETE","lineNumber":196,"oldContent":"                        board.Remove(i, j);"},{"type":"DELETE","lineNumber":197,"oldContent":""},{"type":"DELETE","lineNumber":198,"oldContent":"                        if (score > bestScore)"},{"type":"DELETE","lineNumber":199,"oldContent":"                        {"},{"type":"DELETE","lineNumber":200,"oldContent":"                            bestScore = score;"},{"type":"DELETE","lineNumber":201,"oldContent":"                            bestMove = new Move(i, j);"},{"type":"DELETE","lineNumber":202,"oldContent":"                        }"},{"type":"DELETE","lineNumber":203,"oldContent":"                    }"},{"type":"DELETE","lineNumber":204,"oldContent":"                }"},{"type":"DELETE","lineNumber":205,"oldContent":"            }"},{"type":"DELETE","lineNumber":206,"oldContent":""},{"type":"DELETE","lineNumber":207,"oldContent":"            return bestMove;"},{"type":"DELETE","lineNumber":208,"oldContent":"        }"},{"type":"DELETE","lineNumber":209,"oldContent":""},{"type":"DELETE","lineNumber":210,"oldContent":"        private int Minimax(Board board, int depth, bool maximizing)"},{"type":"DELETE","lineNumber":211,"oldContent":"        {"},{"type":"DELETE","lineNumber":212,"oldContent":"            if (board.HasWinner(out char winner))"},{"type":"DELETE","lineNumber":213,"oldContent":"            {"},{"type":"DELETE","lineNumber":214,"oldContent":"                if (winner == Symbol) return 10 - depth;"},{"type":"DELETE","lineNumber":215,"oldContent":"                if (winner == opponentSymbol) return depth - 10;"},{"type":"DELETE","lineNumber":216,"oldContent":"            }"},{"type":"DELETE","lineNumber":217,"oldContent":"            "},{"type":"DELETE","lineNumber":218,"oldContent":"            if (board.IsFull()) return 0;"},{"type":"DELETE","lineNumber":219,"oldContent":""},{"type":"DELETE","lineNumber":220,"oldContent":"            if (maximizing)"},{"type":"DELETE","lineNumber":221,"oldContent":"            {"},{"type":"DELETE","lineNumber":222,"oldContent":"                int maxEval = int.MinValue;"},{"type":"DELETE","lineNumber":223,"oldContent":"                for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":224,"oldContent":"                {"},{"type":"DELETE","lineNumber":225,"oldContent":"                    for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":226,"oldContent":"                    {"},{"type":"DELETE","lineNumber":227,"oldContent":"                        if (board.IsEmpty(i, j))"},{"type":"DELETE","lineNumber":228,"oldContent":"                        {"},{"type":"DELETE","lineNumber":229,"oldContent":"                            board.Set(i, j, Symbol);"},{"type":"DELETE","lineNumber":230,"oldContent":"                            int eval = Minimax(board, depth + 1, false);"},{"type":"DELETE","lineNumber":231,"oldContent":"                            board.Remove(i, j);"},{"type":"DELETE","lineNumber":232,"oldContent":"                            maxEval = Math.Max(maxEval, eval);"},{"type":"DELETE","lineNumber":233,"oldContent":"                        }"},{"type":"DELETE","lineNumber":234,"oldContent":"                    }"},{"type":"DELETE","lineNumber":235,"oldContent":"                }"},{"type":"DELETE","lineNumber":236,"oldContent":"                return maxEval;"},{"type":"DELETE","lineNumber":237,"oldContent":"            }"},{"type":"DELETE","lineNumber":238,"oldContent":"            else"},{"type":"DELETE","lineNumber":239,"oldContent":"            {"},{"type":"DELETE","lineNumber":240,"oldContent":"                int minEval = int.MaxValue;"},{"type":"DELETE","lineNumber":241,"oldContent":"                for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":242,"oldContent":"                {"},{"type":"DELETE","lineNumber":243,"oldContent":"                    for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":244,"oldContent":"                    {"},{"type":"DELETE","lineNumber":245,"oldContent":"                        if (board.IsEmpty(i, j))"},{"type":"DELETE","lineNumber":246,"oldContent":"                        {"},{"type":"DELETE","lineNumber":247,"oldContent":"                            board.Set(i, j, opponentSymbol);"},{"type":"DELETE","lineNumber":248,"oldContent":"                            int eval = Minimax(board, depth + 1, true);"},{"type":"DELETE","lineNumber":249,"oldContent":"                            board.Remove(i, j);"},{"type":"DELETE","lineNumber":250,"oldContent":"                            minEval = Math.Min(minEval, eval);"},{"type":"DELETE","lineNumber":251,"oldContent":"                        }"},{"type":"DELETE","lineNumber":252,"oldContent":"                    }"},{"type":"DELETE","lineNumber":253,"oldContent":"                }"},{"type":"DELETE","lineNumber":254,"oldContent":"                return minEval;"},{"type":"DELETE","lineNumber":255,"oldContent":"            }"},{"type":"DELETE","lineNumber":256,"oldContent":"        }"},{"type":"DELETE","lineNumber":257,"oldContent":"    }"},{"type":"DELETE","lineNumber":258,"oldContent":"}"},{"type":"DELETE","lineNumber":259,"oldContent":""},{"type":"DELETE","lineNumber":260,"oldContent":"// Game.cs"},{"type":"DELETE","lineNumber":261,"oldContent":"namespace TrisGame"},{"type":"DELETE","lineNumber":262,"oldContent":"{"}]}]},"C:/Users/tagli/RiderProjects/TrisGame/TrisGame/Board.cs":{"filePath":"C:/Users/tagli/RiderProjects/TrisGame/TrisGame/Board.cs","baseContent":"// Board.cs\nnamespace TrisGame\n{\n    public class Board\n    {\n        private char[,] cells = new char[3, 3];\n\n        public Board()\n        {\n            Clear();\n        }\n\n        public void Clear()\n        {\n            for (int i = 0; i < 3; i++)\n                for (int j = 0; j < 3; j++)\n                    cells[i, j] = ' ';\n        }\n\n        public bool IsEmpty(int row, int col)\n        {\n            return row >= 0 && row < 3 && col >= 0 && col < 3 && cells[row, col] == ' ';\n        }\n\n        public void Set(int row, int col, char symbol)\n        {\n            if (IsEmpty(row, col))\n                cells[row, col] = symbol;\n        }\n\n        public void Remove(int row, int col)\n        {\n            cells[row, col] = ' ';\n        }\n\n        public char Get(int row, int col)\n        {\n            return cells[row, col];\n        }\n\n        public bool HasWinner(out char winner)\n        {\n            winner = ' ';\n\n            // Check rows and columns\n            for (int i = 0; i < 3; i++)\n            {\n                if (cells[i, 0] != ' ' && cells[i, 0] == cells[i, 1] && cells[i, 1] == cells[i, 2])\n                {\n                    winner = cells[i, 0];\n                    return true;\n                }\n                if (cells[0, i] != ' ' && cells[0, i] == cells[1, i] && cells[1, i] == cells[2, i])\n                {\n                    winner = cells[0, i];\n                    return true;\n                }\n            }\n\n            // Check diagonals\n            if (cells[0, 0] != ' ' && cells[0, 0] == cells[1, 1] && cells[1, 1] == cells[2, 2])\n            {\n                winner = cells[0, 0];\n                return true;\n            }\n            if (cells[0, 2] != ' ' && cells[0, 2] == cells[1, 1] && cells[1, 1] == cells[2, 0])\n            {\n                winner = cells[0, 2];\n                return true;\n            }\n\n            return false;\n        }\n\n        public bool IsFull()\n        {\n            for (int i = 0; i < 3; i++)\n                for (int j = 0; j < 3; j++)\n                    if (cells[i, j] == ' ')\n                        return false;\n            return true;\n        }\n\n        public void Print()\n        {\n            Console.WriteLine();\n            for (int i = 0; i < 3; i++)\n            {\n                Console.Write(\" \");\n                for (int j = 0; j < 3; j++)\n                {\n                    Console.Write(cells[i, j]);\n                    if (j < 2) Console.Write(\" | \");\n                }\n                Console.WriteLine();\n                if (i < 2) Console.WriteLine(\"---|---|---\");\n            }\n            Console.WriteLine();\n        }\n    }\n}\n\n// Move.cs\nnamespace TrisGame\n{\n    public struct Move\n    {\n        public int Row { get; set; }\n        public int Col { get; set; }\n\n        public Move(int row, int col)\n        {\n            Row = row;\n            Col = col;\n        }\n    }\n\n    public interface IPlayer\n    {\n        char Symbol { get; }\n        Move GetNextMove(Board board);\n    }\n}\n\n// Human.cs\nnamespace TrisGame\n{\n    public class Human : IPlayer\n    {\n        public char Symbol { get; private set; }\n\n        public Human(char symbol)\n        {\n            Symbol = symbol;\n        }\n\n        public Move GetNextMove(Board board)\n        {\n            while (true)\n            {\n                Console.Write($\"Player {Symbol} - enter row and column (0-2): \");\n                var input = Console.ReadLine()?.Split();\n                \n                if (input?.Length == 2 && \n                    int.TryParse(input[0], out int row) && \n                    int.TryParse(input[1], out int col) &&\n                    board.IsEmpty(row, col))\n                {\n                    return new Move(row, col);\n                }\n                \n                Console.WriteLine(\"Invalid move, try again.\");\n            }\n        }\n    }\n}\n\n// Computer.cs\nnamespace TrisGame\n{\n    public class Computer : IPlayer\n    {\n        public char Symbol { get; private set; }\n        private char opponentSymbol;\n\n        public Computer(char symbol)\n        {\n            Symbol = symbol;\n            opponentSymbol = symbol == 'X' ? 'O' : 'X';\n        }\n\n        public Move GetNextMove(Board board)\n        {\n            Console.WriteLine($\"Player {Symbol} thinking...\");\n            Thread.Sleep(1000);\n\n            var bestMove = FindOptimalMove(board);\n            Console.WriteLine($\"Player {Symbol} plays: {bestMove.Row} {bestMove.Col}\");\n            Thread.Sleep(500);\n            \n            return bestMove;\n        }\n\n        private Move FindOptimalMove(Board board)\n        {\n            int bestScore = int.MinValue;\n            var bestMove = new Move(-1, -1);\n\n            for (int i = 0; i < 3; i++)\n            {\n                for (int j = 0; j < 3; j++)\n                {\n                    if (board.IsEmpty(i, j))\n                    {\n                        board.Set(i, j, Symbol);\n                        int score = Minimax(board, 0, false);\n                        board.Remove(i, j);\n\n                        if (score > bestScore)\n                        {\n                            bestScore = score;\n                            bestMove = new Move(i, j);\n                        }\n                    }\n                }\n            }\n\n            return bestMove;\n        }\n\n        private int Minimax(Board board, int depth, bool maximizing)\n        {\n            if (board.HasWinner(out char winner))\n            {\n                if (winner == Symbol) return 10 - depth;\n                if (winner == opponentSymbol) return depth - 10;\n            }\n            \n            if (board.IsFull()) return 0;\n\n            if (maximizing)\n            {\n                int maxEval = int.MinValue;\n                for (int i = 0; i < 3; i++)\n                {\n                    for (int j = 0; j < 3; j++)\n                    {\n                        if (board.IsEmpty(i, j))\n                        {\n                            board.Set(i, j, Symbol);\n                            int eval = Minimax(board, depth + 1, false);\n                            board.Remove(i, j);\n                            maxEval = Math.Max(maxEval, eval);\n                        }\n                    }\n                }\n                return maxEval;\n            }\n            else\n            {\n                int minEval = int.MaxValue;\n                for (int i = 0; i < 3; i++)\n                {\n                    for (int j = 0; j < 3; j++)\n                    {\n                        if (board.IsEmpty(i, j))\n                        {\n                            board.Set(i, j, opponentSymbol);\n                            int eval = Minimax(board, depth + 1, true);\n                            board.Remove(i, j);\n                            minEval = Math.Min(minEval, eval);\n                        }\n                    }\n                }\n                return minEval;\n            }\n        }\n    }\n}\n\n// Game.cs\nnamespace TrisGame\n{\n    public class Game\n    {\n        private Board board;\n        private IPlayer[] players;\n        private int currentPlayerIndex;\n\n        public Game()\n        {\n            board = new Board();\n            players = new IPlayer[]\n            {\n                new Human('X'),\n                new Computer('O')\n            };\n            currentPlayerIndex = 0;\n        }\n\n        public void Start()\n        {\n            Console.WriteLine(\"Tic Tac Toe\");\n            Console.WriteLine(\"Human: X, Computer: O\\n\");\n\n            while (true)\n            {\n                PlayRound();\n                \n                Console.Write(\"Play again? (y/n): \");\n                if (Console.ReadLine()?.ToLower() != \"y\")\n                    break;\n                    \n                Reset();\n            }\n        }\n\n        private void PlayRound()\n        {\n            while (true)\n            {\n                Console.Clear();\n                Console.WriteLine(\"Tic Tac Toe\\n\");\n                board.Print();\n\n                var currentPlayer = players[currentPlayerIndex];\n                var move = currentPlayer.GetNextMove(board);\n                board.Set(move.Row, move.Col, currentPlayer.Symbol);\n\n                if (board.HasWinner(out char winner))\n                {\n                    Console.Clear();\n                    Console.WriteLine(\"Tic Tac Toe\\n\");\n                    board.Print();\n                    Console.WriteLine($\"Player {winner} wins!\");\n                    break;\n                }\n\n                if (board.IsFull())\n                {\n                    Console.Clear();\n                    Console.WriteLine(\"Tic Tac Toe\\n\");\n                    board.Print();\n                    Console.WriteLine(\"It's a tie!\");\n                    break;\n                }\n\n                currentPlayerIndex = 1 - currentPlayerIndex;\n            }\n        }\n\n        private void Reset()\n        {\n            board.Clear();\n            currentPlayerIndex = 0;\n        }\n    }\n}\n\n// Program.cs\nnamespace TrisGame\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var game = new Game();\n            game.Start();\n        }\n    }","baseTimestamp":1756986102046,"deltas":[{"timestamp":1756986112648,"changes":[{"type":"DELETE","lineNumber":102,"oldContent":"// Move.cs"},{"type":"DELETE","lineNumber":103,"oldContent":"namespace TrisGame"},{"type":"DELETE","lineNumber":104,"oldContent":"{"},{"type":"DELETE","lineNumber":105,"oldContent":"    public struct Move"},{"type":"DELETE","lineNumber":106,"oldContent":"    {"},{"type":"DELETE","lineNumber":107,"oldContent":"        public int Row { get; set; }"},{"type":"DELETE","lineNumber":108,"oldContent":"        public int Col { get; set; }"},{"type":"DELETE","lineNumber":109,"oldContent":""},{"type":"DELETE","lineNumber":110,"oldContent":"        public Move(int row, int col)"},{"type":"DELETE","lineNumber":111,"oldContent":"        {"},{"type":"DELETE","lineNumber":112,"oldContent":"            Row = row;"},{"type":"DELETE","lineNumber":113,"oldContent":"            Col = col;"},{"type":"DELETE","lineNumber":114,"oldContent":"        }"},{"type":"DELETE","lineNumber":115,"oldContent":"    }"},{"type":"DELETE","lineNumber":116,"oldContent":""},{"type":"DELETE","lineNumber":117,"oldContent":"    public interface IPlayer"},{"type":"DELETE","lineNumber":118,"oldContent":"    {"},{"type":"DELETE","lineNumber":119,"oldContent":"        char Symbol { get; }"},{"type":"DELETE","lineNumber":120,"oldContent":"        Move GetNextMove(Board board);"},{"type":"DELETE","lineNumber":121,"oldContent":"    }"},{"type":"DELETE","lineNumber":122,"oldContent":"}"},{"type":"DELETE","lineNumber":123,"oldContent":""},{"type":"DELETE","lineNumber":124,"oldContent":"// Human.cs"},{"type":"DELETE","lineNumber":125,"oldContent":"namespace TrisGame"},{"type":"DELETE","lineNumber":126,"oldContent":"{"},{"type":"DELETE","lineNumber":127,"oldContent":"    public class Human : IPlayer"},{"type":"DELETE","lineNumber":128,"oldContent":"    {"},{"type":"DELETE","lineNumber":129,"oldContent":"        public char Symbol { get; private set; }"},{"type":"DELETE","lineNumber":130,"oldContent":""},{"type":"DELETE","lineNumber":131,"oldContent":"        public Human(char symbol)"},{"type":"DELETE","lineNumber":132,"oldContent":"        {"},{"type":"DELETE","lineNumber":133,"oldContent":"            Symbol = symbol;"},{"type":"DELETE","lineNumber":134,"oldContent":"        }"},{"type":"DELETE","lineNumber":135,"oldContent":""},{"type":"DELETE","lineNumber":136,"oldContent":"        public Move GetNextMove(Board board)"},{"type":"DELETE","lineNumber":137,"oldContent":"        {"},{"type":"DELETE","lineNumber":138,"oldContent":"            while (true)"},{"type":"DELETE","lineNumber":139,"oldContent":"            {"},{"type":"DELETE","lineNumber":140,"oldContent":"                Console.Write($\"Player {Symbol} - enter row and column (0-2): \");"},{"type":"DELETE","lineNumber":141,"oldContent":"                var input = Console.ReadLine()?.Split();"},{"type":"DELETE","lineNumber":142,"oldContent":"                "},{"type":"DELETE","lineNumber":143,"oldContent":"                if (input?.Length == 2 && "},{"type":"DELETE","lineNumber":144,"oldContent":"                    int.TryParse(input[0], out int row) && "},{"type":"DELETE","lineNumber":145,"oldContent":"                    int.TryParse(input[1], out int col) &&"},{"type":"DELETE","lineNumber":146,"oldContent":"                    board.IsEmpty(row, col))"},{"type":"DELETE","lineNumber":147,"oldContent":"                {"},{"type":"DELETE","lineNumber":148,"oldContent":"                    return new Move(row, col);"},{"type":"DELETE","lineNumber":149,"oldContent":"                }"},{"type":"DELETE","lineNumber":150,"oldContent":"                "},{"type":"DELETE","lineNumber":151,"oldContent":"                Console.WriteLine(\"Invalid move, try again.\");"},{"type":"DELETE","lineNumber":152,"oldContent":"            }"},{"type":"DELETE","lineNumber":153,"oldContent":"        }"},{"type":"DELETE","lineNumber":154,"oldContent":"    }"},{"type":"DELETE","lineNumber":155,"oldContent":"}"},{"type":"DELETE","lineNumber":156,"oldContent":""},{"type":"DELETE","lineNumber":157,"oldContent":"// Computer.cs"},{"type":"DELETE","lineNumber":158,"oldContent":"namespace TrisGame"},{"type":"DELETE","lineNumber":159,"oldContent":"{"},{"type":"DELETE","lineNumber":160,"oldContent":"    public class Computer : IPlayer"},{"type":"DELETE","lineNumber":161,"oldContent":"    {"},{"type":"DELETE","lineNumber":162,"oldContent":"        public char Symbol { get; private set; }"},{"type":"DELETE","lineNumber":163,"oldContent":"        private char opponentSymbol;"},{"type":"DELETE","lineNumber":164,"oldContent":""},{"type":"DELETE","lineNumber":165,"oldContent":"        public Computer(char symbol)"},{"type":"DELETE","lineNumber":166,"oldContent":"        {"},{"type":"DELETE","lineNumber":167,"oldContent":"            Symbol = symbol;"},{"type":"DELETE","lineNumber":168,"oldContent":"            opponentSymbol = symbol == 'X' ? 'O' : 'X';"},{"type":"DELETE","lineNumber":169,"oldContent":"        }"},{"type":"DELETE","lineNumber":170,"oldContent":""},{"type":"DELETE","lineNumber":171,"oldContent":"        public Move GetNextMove(Board board)"},{"type":"DELETE","lineNumber":172,"oldContent":"        {"},{"type":"DELETE","lineNumber":173,"oldContent":"            Console.WriteLine($\"Player {Symbol} thinking...\");"},{"type":"DELETE","lineNumber":174,"oldContent":"            Thread.Sleep(1000);"},{"type":"DELETE","lineNumber":175,"oldContent":""},{"type":"DELETE","lineNumber":176,"oldContent":"            var bestMove = FindOptimalMove(board);"},{"type":"DELETE","lineNumber":177,"oldContent":"            Console.WriteLine($\"Player {Symbol} plays: {bestMove.Row} {bestMove.Col}\");"},{"type":"DELETE","lineNumber":178,"oldContent":"            Thread.Sleep(500);"},{"type":"DELETE","lineNumber":179,"oldContent":"            "},{"type":"DELETE","lineNumber":180,"oldContent":"            return bestMove;"},{"type":"DELETE","lineNumber":181,"oldContent":"        }"},{"type":"DELETE","lineNumber":182,"oldContent":""},{"type":"DELETE","lineNumber":183,"oldContent":"        private Move FindOptimalMove(Board board)"},{"type":"DELETE","lineNumber":184,"oldContent":"        {"},{"type":"DELETE","lineNumber":185,"oldContent":"            int bestScore = int.MinValue;"},{"type":"DELETE","lineNumber":186,"oldContent":"            var bestMove = new Move(-1, -1);"},{"type":"DELETE","lineNumber":187,"oldContent":""},{"type":"DELETE","lineNumber":188,"oldContent":"            for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":189,"oldContent":"            {"},{"type":"DELETE","lineNumber":190,"oldContent":"                for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":191,"oldContent":"                {"},{"type":"DELETE","lineNumber":192,"oldContent":"                    if (board.IsEmpty(i, j))"},{"type":"DELETE","lineNumber":193,"oldContent":"                    {"},{"type":"DELETE","lineNumber":194,"oldContent":"                        board.Set(i, j, Symbol);"},{"type":"DELETE","lineNumber":195,"oldContent":"                        int score = Minimax(board, 0, false);"},{"type":"DELETE","lineNumber":196,"oldContent":"                        board.Remove(i, j);"},{"type":"DELETE","lineNumber":197,"oldContent":""},{"type":"DELETE","lineNumber":198,"oldContent":"                        if (score > bestScore)"},{"type":"DELETE","lineNumber":199,"oldContent":"                        {"},{"type":"DELETE","lineNumber":200,"oldContent":"                            bestScore = score;"},{"type":"DELETE","lineNumber":201,"oldContent":"                            bestMove = new Move(i, j);"},{"type":"DELETE","lineNumber":202,"oldContent":"                        }"},{"type":"DELETE","lineNumber":203,"oldContent":"                    }"},{"type":"DELETE","lineNumber":204,"oldContent":"                }"},{"type":"DELETE","lineNumber":205,"oldContent":"            }"},{"type":"DELETE","lineNumber":206,"oldContent":""},{"type":"DELETE","lineNumber":207,"oldContent":"            return bestMove;"},{"type":"DELETE","lineNumber":208,"oldContent":"        }"},{"type":"DELETE","lineNumber":209,"oldContent":""},{"type":"DELETE","lineNumber":210,"oldContent":"        private int Minimax(Board board, int depth, bool maximizing)"},{"type":"DELETE","lineNumber":211,"oldContent":"        {"},{"type":"DELETE","lineNumber":212,"oldContent":"            if (board.HasWinner(out char winner))"},{"type":"DELETE","lineNumber":213,"oldContent":"            {"},{"type":"DELETE","lineNumber":214,"oldContent":"                if (winner == Symbol) return 10 - depth;"},{"type":"DELETE","lineNumber":215,"oldContent":"                if (winner == opponentSymbol) return depth - 10;"},{"type":"DELETE","lineNumber":216,"oldContent":"            }"},{"type":"DELETE","lineNumber":217,"oldContent":"            "},{"type":"DELETE","lineNumber":218,"oldContent":"            if (board.IsFull()) return 0;"},{"type":"DELETE","lineNumber":219,"oldContent":""},{"type":"DELETE","lineNumber":220,"oldContent":"            if (maximizing)"},{"type":"DELETE","lineNumber":221,"oldContent":"            {"},{"type":"DELETE","lineNumber":222,"oldContent":"                int maxEval = int.MinValue;"},{"type":"DELETE","lineNumber":223,"oldContent":"                for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":224,"oldContent":"                {"},{"type":"DELETE","lineNumber":225,"oldContent":"                    for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":226,"oldContent":"                    {"},{"type":"DELETE","lineNumber":227,"oldContent":"                        if (board.IsEmpty(i, j))"},{"type":"DELETE","lineNumber":228,"oldContent":"                        {"},{"type":"DELETE","lineNumber":229,"oldContent":"                            board.Set(i, j, Symbol);"},{"type":"DELETE","lineNumber":230,"oldContent":"                            int eval = Minimax(board, depth + 1, false);"},{"type":"DELETE","lineNumber":231,"oldContent":"                            board.Remove(i, j);"},{"type":"DELETE","lineNumber":232,"oldContent":"                            maxEval = Math.Max(maxEval, eval);"},{"type":"DELETE","lineNumber":233,"oldContent":"                        }"},{"type":"DELETE","lineNumber":234,"oldContent":"                    }"},{"type":"DELETE","lineNumber":235,"oldContent":"                }"},{"type":"DELETE","lineNumber":236,"oldContent":"                return maxEval;"},{"type":"DELETE","lineNumber":237,"oldContent":"            }"},{"type":"DELETE","lineNumber":238,"oldContent":"            else"},{"type":"DELETE","lineNumber":239,"oldContent":"            {"},{"type":"DELETE","lineNumber":240,"oldContent":"                int minEval = int.MaxValue;"},{"type":"DELETE","lineNumber":241,"oldContent":"                for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":242,"oldContent":"                {"},{"type":"DELETE","lineNumber":243,"oldContent":"                    for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":244,"oldContent":"                    {"},{"type":"DELETE","lineNumber":245,"oldContent":"                        if (board.IsEmpty(i, j))"},{"type":"DELETE","lineNumber":246,"oldContent":"                        {"},{"type":"DELETE","lineNumber":247,"oldContent":"                            board.Set(i, j, opponentSymbol);"},{"type":"DELETE","lineNumber":248,"oldContent":"                            int eval = Minimax(board, depth + 1, true);"},{"type":"DELETE","lineNumber":249,"oldContent":"                            board.Remove(i, j);"},{"type":"DELETE","lineNumber":250,"oldContent":"                            minEval = Math.Min(minEval, eval);"},{"type":"DELETE","lineNumber":251,"oldContent":"                        }"},{"type":"DELETE","lineNumber":252,"oldContent":"                    }"},{"type":"DELETE","lineNumber":253,"oldContent":"                }"},{"type":"DELETE","lineNumber":254,"oldContent":"                return minEval;"},{"type":"DELETE","lineNumber":255,"oldContent":"            }"},{"type":"DELETE","lineNumber":256,"oldContent":"        }"},{"type":"DELETE","lineNumber":257,"oldContent":"    }"},{"type":"DELETE","lineNumber":258,"oldContent":"}"},{"type":"DELETE","lineNumber":259,"oldContent":""},{"type":"DELETE","lineNumber":260,"oldContent":"// Game.cs"},{"type":"DELETE","lineNumber":261,"oldContent":"namespace TrisGame"},{"type":"DELETE","lineNumber":262,"oldContent":"{"},{"type":"DELETE","lineNumber":263,"oldContent":"    public class Game"},{"type":"DELETE","lineNumber":264,"oldContent":"    {"},{"type":"DELETE","lineNumber":265,"oldContent":"        private Board board;"},{"type":"DELETE","lineNumber":266,"oldContent":"        private IPlayer[] players;"},{"type":"DELETE","lineNumber":267,"oldContent":"        private int currentPlayerIndex;"},{"type":"DELETE","lineNumber":268,"oldContent":""},{"type":"DELETE","lineNumber":269,"oldContent":"        public Game()"},{"type":"DELETE","lineNumber":270,"oldContent":"        {"},{"type":"DELETE","lineNumber":271,"oldContent":"            board = new Board();"},{"type":"DELETE","lineNumber":272,"oldContent":"            players = new IPlayer[]"},{"type":"DELETE","lineNumber":273,"oldContent":"            {"},{"type":"DELETE","lineNumber":274,"oldContent":"                new Human('X'),"},{"type":"DELETE","lineNumber":275,"oldContent":"                new Computer('O')"},{"type":"DELETE","lineNumber":276,"oldContent":"            };"},{"type":"DELETE","lineNumber":277,"oldContent":"            currentPlayerIndex = 0;"},{"type":"DELETE","lineNumber":278,"oldContent":"        }"},{"type":"DELETE","lineNumber":279,"oldContent":""},{"type":"DELETE","lineNumber":280,"oldContent":"        public void Start()"},{"type":"DELETE","lineNumber":281,"oldContent":"        {"},{"type":"DELETE","lineNumber":282,"oldContent":"            Console.WriteLine(\"Tic Tac Toe\");"},{"type":"DELETE","lineNumber":283,"oldContent":"            Console.WriteLine(\"Human: X, Computer: O\\n\");"},{"type":"DELETE","lineNumber":284,"oldContent":""},{"type":"DELETE","lineNumber":285,"oldContent":"            while (true)"},{"type":"DELETE","lineNumber":286,"oldContent":"            {"},{"type":"DELETE","lineNumber":287,"oldContent":"                PlayRound();"},{"type":"DELETE","lineNumber":288,"oldContent":"                "},{"type":"DELETE","lineNumber":289,"oldContent":"                Console.Write(\"Play again? (y/n): \");"},{"type":"DELETE","lineNumber":290,"oldContent":"                if (Console.ReadLine()?.ToLower() != \"y\")"},{"type":"DELETE","lineNumber":291,"oldContent":"                    break;"},{"type":"DELETE","lineNumber":292,"oldContent":"                    "},{"type":"DELETE","lineNumber":293,"oldContent":"                Reset();"},{"type":"DELETE","lineNumber":294,"oldContent":"            }"},{"type":"DELETE","lineNumber":295,"oldContent":"        }"},{"type":"DELETE","lineNumber":296,"oldContent":""},{"type":"DELETE","lineNumber":297,"oldContent":"        private void PlayRound()"},{"type":"DELETE","lineNumber":298,"oldContent":"        {"},{"type":"DELETE","lineNumber":299,"oldContent":"            while (true)"},{"type":"DELETE","lineNumber":300,"oldContent":"            {"},{"type":"DELETE","lineNumber":301,"oldContent":"                Console.Clear();"},{"type":"DELETE","lineNumber":302,"oldContent":"                Console.WriteLine(\"Tic Tac Toe\\n\");"},{"type":"DELETE","lineNumber":303,"oldContent":"                board.Print();"},{"type":"DELETE","lineNumber":304,"oldContent":""},{"type":"DELETE","lineNumber":305,"oldContent":"                var currentPlayer = players[currentPlayerIndex];"},{"type":"DELETE","lineNumber":306,"oldContent":"                var move = currentPlayer.GetNextMove(board);"},{"type":"DELETE","lineNumber":307,"oldContent":"                board.Set(move.Row, move.Col, currentPlayer.Symbol);"},{"type":"DELETE","lineNumber":308,"oldContent":""},{"type":"DELETE","lineNumber":309,"oldContent":"                if (board.HasWinner(out char winner))"},{"type":"DELETE","lineNumber":310,"oldContent":"                {"},{"type":"DELETE","lineNumber":311,"oldContent":"                    Console.Clear();"},{"type":"DELETE","lineNumber":312,"oldContent":"                    Console.WriteLine(\"Tic Tac Toe\\n\");"},{"type":"DELETE","lineNumber":313,"oldContent":"                    board.Print();"},{"type":"DELETE","lineNumber":314,"oldContent":"                    Console.WriteLine($\"Player {winner} wins!\");"},{"type":"DELETE","lineNumber":315,"oldContent":"                    break;"},{"type":"DELETE","lineNumber":316,"oldContent":"                }"},{"type":"DELETE","lineNumber":317,"oldContent":""},{"type":"DELETE","lineNumber":318,"oldContent":"                if (board.IsFull())"},{"type":"DELETE","lineNumber":319,"oldContent":"                {"},{"type":"DELETE","lineNumber":320,"oldContent":"                    Console.Clear();"},{"type":"DELETE","lineNumber":321,"oldContent":"                    Console.WriteLine(\"Tic Tac Toe\\n\");"},{"type":"DELETE","lineNumber":322,"oldContent":"                    board.Print();"},{"type":"DELETE","lineNumber":323,"oldContent":"                    Console.WriteLine(\"It's a tie!\");"},{"type":"DELETE","lineNumber":324,"oldContent":"                    break;"},{"type":"DELETE","lineNumber":325,"oldContent":"                }"},{"type":"DELETE","lineNumber":326,"oldContent":""},{"type":"DELETE","lineNumber":327,"oldContent":"                currentPlayerIndex = 1 - currentPlayerIndex;"},{"type":"DELETE","lineNumber":328,"oldContent":"            }"},{"type":"DELETE","lineNumber":329,"oldContent":"        }"},{"type":"DELETE","lineNumber":330,"oldContent":""},{"type":"DELETE","lineNumber":331,"oldContent":"        private void Reset()"},{"type":"DELETE","lineNumber":332,"oldContent":"        {"},{"type":"DELETE","lineNumber":333,"oldContent":"            board.Clear();"},{"type":"DELETE","lineNumber":334,"oldContent":"            currentPlayerIndex = 0;"},{"type":"DELETE","lineNumber":335,"oldContent":"        }"},{"type":"DELETE","lineNumber":336,"oldContent":"    }"},{"type":"DELETE","lineNumber":337,"oldContent":"}"},{"type":"DELETE","lineNumber":338,"oldContent":""},{"type":"DELETE","lineNumber":339,"oldContent":"// Program.cs"},{"type":"DELETE","lineNumber":340,"oldContent":"namespace TrisGame"},{"type":"DELETE","lineNumber":341,"oldContent":"{"},{"type":"DELETE","lineNumber":342,"oldContent":"    class Program"},{"type":"DELETE","lineNumber":343,"oldContent":"    {"},{"type":"DELETE","lineNumber":344,"oldContent":"        static void Main(string[] args)"},{"type":"DELETE","lineNumber":345,"oldContent":"        {"},{"type":"DELETE","lineNumber":346,"oldContent":"            var game = new Game();"},{"type":"DELETE","lineNumber":347,"oldContent":"            game.Start();"},{"type":"DELETE","lineNumber":348,"oldContent":"        }"},{"type":"DELETE","lineNumber":349,"oldContent":"    }"}]},{"timestamp":1756986200472,"changes":[{"type":"DELETE","lineNumber":0,"oldContent":"// Board.cs"}]},{"timestamp":1756986416276,"changes":[{"type":"DELETE","lineNumber":100,"oldContent":""}]}]},"C:/Users/tagli/RiderProjects/TrisGame/TrisGame/Move.cs":{"filePath":"C:/Users/tagli/RiderProjects/TrisGame/TrisGame/Move.cs","baseContent":"namespace TrisGame;\n\npublic class Move\n{\n    \n}","baseTimestamp":1756986117938,"deltas":[{"timestamp":1756986119975,"changes":[{"type":"MODIFY","lineNumber":0,"content":"// Board.cs","oldContent":"namespace TrisGame;"},{"type":"INSERT","lineNumber":1,"content":"namespace TrisGame"},{"type":"INSERT","lineNumber":2,"content":"{"},{"type":"INSERT","lineNumber":3,"content":"    public class Board"},{"type":"INSERT","lineNumber":4,"content":"    {"},{"type":"INSERT","lineNumber":5,"content":"        private char[,] cells = new char[3, 3];"},{"type":"DELETE","lineNumber":2,"oldContent":"public class Move"},{"type":"INSERT","lineNumber":7,"content":"        public Board()"},{"type":"INSERT","lineNumber":8,"content":"        {"},{"type":"INSERT","lineNumber":9,"content":"            Clear();"},{"type":"INSERT","lineNumber":10,"content":"        }"},{"type":"INSERT","lineNumber":11,"content":""},{"type":"INSERT","lineNumber":12,"content":"        public void Clear()"},{"type":"INSERT","lineNumber":13,"content":"        {"},{"type":"INSERT","lineNumber":14,"content":"            for (int i = 0; i < 3; i++)"},{"type":"INSERT","lineNumber":15,"content":"                for (int j = 0; j < 3; j++)"},{"type":"INSERT","lineNumber":16,"content":"                    cells[i, j] = ' ';"},{"type":"INSERT","lineNumber":17,"content":"        }"},{"type":"INSERT","lineNumber":18,"content":""},{"type":"INSERT","lineNumber":19,"content":"        public bool IsEmpty(int row, int col)"},{"type":"INSERT","lineNumber":20,"content":"        {"},{"type":"INSERT","lineNumber":21,"content":"            return row >= 0 && row < 3 && col >= 0 && col < 3 && cells[row, col] == ' ';"},{"type":"INSERT","lineNumber":22,"content":"        }"},{"type":"INSERT","lineNumber":23,"content":""},{"type":"INSERT","lineNumber":24,"content":"        public void Set(int row, int col, char symbol)"},{"type":"INSERT","lineNumber":25,"content":"        {"},{"type":"INSERT","lineNumber":26,"content":"            if (IsEmpty(row, col))"},{"type":"INSERT","lineNumber":27,"content":"                cells[row, col] = symbol;"},{"type":"INSERT","lineNumber":28,"content":"        }"},{"type":"INSERT","lineNumber":29,"content":""},{"type":"INSERT","lineNumber":30,"content":"        public void Remove(int row, int col)"},{"type":"INSERT","lineNumber":31,"content":"        {"},{"type":"INSERT","lineNumber":32,"content":"            cells[row, col] = ' ';"},{"type":"INSERT","lineNumber":33,"content":"        }"},{"type":"INSERT","lineNumber":34,"content":""},{"type":"INSERT","lineNumber":35,"content":"        public char Get(int row, int col)"},{"type":"INSERT","lineNumber":36,"content":"        {"},{"type":"INSERT","lineNumber":37,"content":"            return cells[row, col];"},{"type":"INSERT","lineNumber":38,"content":"        }"},{"type":"INSERT","lineNumber":39,"content":""},{"type":"INSERT","lineNumber":40,"content":"        public bool HasWinner(out char winner)"},{"type":"INSERT","lineNumber":41,"content":"        {"},{"type":"INSERT","lineNumber":42,"content":"            winner = ' ';"},{"type":"INSERT","lineNumber":43,"content":""},{"type":"INSERT","lineNumber":44,"content":"            // Check rows and columns"},{"type":"INSERT","lineNumber":45,"content":"            for (int i = 0; i < 3; i++)"},{"type":"INSERT","lineNumber":46,"content":"            {"},{"type":"INSERT","lineNumber":47,"content":"                if (cells[i, 0] != ' ' && cells[i, 0] == cells[i, 1] && cells[i, 1] == cells[i, 2])"},{"type":"INSERT","lineNumber":48,"content":"                {"},{"type":"INSERT","lineNumber":49,"content":"                    winner = cells[i, 0];"},{"type":"INSERT","lineNumber":50,"content":"                    return true;"},{"type":"INSERT","lineNumber":51,"content":"                }"},{"type":"INSERT","lineNumber":52,"content":"                if (cells[0, i] != ' ' && cells[0, i] == cells[1, i] && cells[1, i] == cells[2, i])"},{"type":"INSERT","lineNumber":53,"content":"                {"},{"type":"INSERT","lineNumber":54,"content":"                    winner = cells[0, i];"},{"type":"INSERT","lineNumber":55,"content":"                    return true;"},{"type":"INSERT","lineNumber":56,"content":"                }"},{"type":"INSERT","lineNumber":57,"content":"            }"},{"type":"INSERT","lineNumber":58,"content":""},{"type":"INSERT","lineNumber":59,"content":"            // Check diagonals"},{"type":"INSERT","lineNumber":60,"content":"            if (cells[0, 0] != ' ' && cells[0, 0] == cells[1, 1] && cells[1, 1] == cells[2, 2])"},{"type":"INSERT","lineNumber":61,"content":"            {"},{"type":"INSERT","lineNumber":62,"content":"                winner = cells[0, 0];"},{"type":"INSERT","lineNumber":63,"content":"                return true;"},{"type":"INSERT","lineNumber":64,"content":"            }"},{"type":"INSERT","lineNumber":65,"content":"            if (cells[0, 2] != ' ' && cells[0, 2] == cells[1, 1] && cells[1, 1] == cells[2, 0])"},{"type":"INSERT","lineNumber":66,"content":"            {"},{"type":"INSERT","lineNumber":67,"content":"                winner = cells[0, 2];"},{"type":"INSERT","lineNumber":68,"content":"                return true;"},{"type":"INSERT","lineNumber":69,"content":"            }"},{"type":"INSERT","lineNumber":70,"content":""},{"type":"INSERT","lineNumber":71,"content":"            return false;"},{"type":"INSERT","lineNumber":72,"content":"        }"},{"type":"INSERT","lineNumber":73,"content":""},{"type":"INSERT","lineNumber":74,"content":"        public bool IsFull()"},{"type":"INSERT","lineNumber":75,"content":"        {"},{"type":"INSERT","lineNumber":76,"content":"            for (int i = 0; i < 3; i++)"},{"type":"INSERT","lineNumber":77,"content":"                for (int j = 0; j < 3; j++)"},{"type":"INSERT","lineNumber":78,"content":"                    if (cells[i, j] == ' ')"},{"type":"INSERT","lineNumber":79,"content":"                        return false;"},{"type":"INSERT","lineNumber":80,"content":"            return true;"},{"type":"INSERT","lineNumber":81,"content":"        }"},{"type":"INSERT","lineNumber":82,"content":""},{"type":"INSERT","lineNumber":83,"content":"        public void Print()"},{"type":"INSERT","lineNumber":84,"content":"        {"},{"type":"INSERT","lineNumber":85,"content":"            Console.WriteLine();"},{"type":"INSERT","lineNumber":86,"content":"            for (int i = 0; i < 3; i++)"},{"type":"INSERT","lineNumber":87,"content":"            {"},{"type":"INSERT","lineNumber":88,"content":"                Console.Write(\" \");"},{"type":"INSERT","lineNumber":89,"content":"                for (int j = 0; j < 3; j++)"},{"type":"INSERT","lineNumber":90,"content":"                {"},{"type":"INSERT","lineNumber":91,"content":"                    Console.Write(cells[i, j]);"},{"type":"INSERT","lineNumber":92,"content":"                    if (j < 2) Console.Write(\" | \");"},{"type":"INSERT","lineNumber":93,"content":"                }"},{"type":"INSERT","lineNumber":94,"content":"                Console.WriteLine();"},{"type":"INSERT","lineNumber":95,"content":"                if (i < 2) Console.WriteLine(\"---|---|---\");"},{"type":"INSERT","lineNumber":96,"content":"            }"},{"type":"INSERT","lineNumber":97,"content":"            Console.WriteLine();"},{"type":"INSERT","lineNumber":98,"content":"        }"},{"type":"INSERT","lineNumber":99,"content":"    }"},{"type":"INSERT","lineNumber":100,"content":"}"},{"type":"INSERT","lineNumber":101,"content":""},{"type":"INSERT","lineNumber":102,"content":"// Move.cs"},{"type":"INSERT","lineNumber":103,"content":"namespace TrisGame"},{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"INSERT","lineNumber":105,"content":"    public struct Move"},{"type":"INSERT","lineNumber":106,"content":"    {"},{"type":"INSERT","lineNumber":107,"content":"        public int Row { get; set; }"},{"type":"INSERT","lineNumber":108,"content":"        public int Col { get; set; }"},{"type":"INSERT","lineNumber":109,"content":""},{"type":"INSERT","lineNumber":110,"content":"        public Move(int row, int col)"},{"type":"INSERT","lineNumber":111,"content":"        {"},{"type":"INSERT","lineNumber":112,"content":"            Row = row;"},{"type":"INSERT","lineNumber":113,"content":"            Col = col;"},{"type":"INSERT","lineNumber":114,"content":"        }"},{"type":"INSERT","lineNumber":115,"content":"    }"},{"type":"INSERT","lineNumber":116,"content":""},{"type":"INSERT","lineNumber":117,"content":"    public interface IPlayer"},{"type":"INSERT","lineNumber":118,"content":"    {"},{"type":"INSERT","lineNumber":119,"content":"        char Symbol { get; }"},{"type":"INSERT","lineNumber":120,"content":"        Move GetNextMove(Board board);"},{"type":"INSERT","lineNumber":121,"content":"    }"},{"type":"INSERT","lineNumber":123,"content":""},{"type":"INSERT","lineNumber":124,"content":"// Human.cs"},{"type":"INSERT","lineNumber":125,"content":"namespace TrisGame"},{"type":"INSERT","lineNumber":126,"content":"{"},{"type":"INSERT","lineNumber":127,"content":"    public class Human : IPlayer"},{"type":"INSERT","lineNumber":128,"content":"    {"},{"type":"INSERT","lineNumber":129,"content":"        public char Symbol { get; private set; }"},{"type":"INSERT","lineNumber":130,"content":""},{"type":"INSERT","lineNumber":131,"content":"        public Human(char symbol)"},{"type":"INSERT","lineNumber":132,"content":"        {"},{"type":"INSERT","lineNumber":133,"content":"            Symbol = symbol;"},{"type":"INSERT","lineNumber":134,"content":"        }"},{"type":"INSERT","lineNumber":135,"content":""},{"type":"INSERT","lineNumber":136,"content":"        public Move GetNextMove(Board board)"},{"type":"INSERT","lineNumber":137,"content":"        {"},{"type":"INSERT","lineNumber":138,"content":"            while (true)"},{"type":"INSERT","lineNumber":139,"content":"            {"},{"type":"INSERT","lineNumber":140,"content":"                Console.Write($\"Player {Symbol} - enter row and column (0-2): \");"},{"type":"INSERT","lineNumber":141,"content":"                var input = Console.ReadLine()?.Split();"},{"type":"INSERT","lineNumber":142,"content":"                "},{"type":"INSERT","lineNumber":143,"content":"                if (input?.Length == 2 && "},{"type":"INSERT","lineNumber":144,"content":"                    int.TryParse(input[0], out int row) && "},{"type":"INSERT","lineNumber":145,"content":"                    int.TryParse(input[1], out int col) &&"},{"type":"INSERT","lineNumber":146,"content":"                    board.IsEmpty(row, col))"},{"type":"INSERT","lineNumber":147,"content":"                {"},{"type":"INSERT","lineNumber":148,"content":"                    return new Move(row, col);"},{"type":"INSERT","lineNumber":149,"content":"                }"},{"type":"INSERT","lineNumber":150,"content":"                "},{"type":"INSERT","lineNumber":151,"content":"                Console.WriteLine(\"Invalid move, try again.\");"},{"type":"INSERT","lineNumber":152,"content":"            }"},{"type":"INSERT","lineNumber":153,"content":"        }"},{"type":"INSERT","lineNumber":154,"content":"    }"},{"type":"INSERT","lineNumber":155,"content":"}"},{"type":"INSERT","lineNumber":156,"content":""},{"type":"INSERT","lineNumber":157,"content":"// Computer.cs"},{"type":"INSERT","lineNumber":158,"content":"namespace TrisGame"},{"type":"INSERT","lineNumber":159,"content":"{"},{"type":"INSERT","lineNumber":160,"content":"    public class Computer : IPlayer"},{"type":"INSERT","lineNumber":161,"content":"    {"},{"type":"INSERT","lineNumber":162,"content":"        public char Symbol { get; private set; }"},{"type":"INSERT","lineNumber":163,"content":"        private char opponentSymbol;"},{"type":"INSERT","lineNumber":164,"content":""},{"type":"INSERT","lineNumber":165,"content":"        public Computer(char symbol)"},{"type":"INSERT","lineNumber":166,"content":"        {"},{"type":"INSERT","lineNumber":167,"content":"            Symbol = symbol;"},{"type":"INSERT","lineNumber":168,"content":"            opponentSymbol = symbol == 'X' ? 'O' : 'X';"},{"type":"INSERT","lineNumber":169,"content":"        }"},{"type":"INSERT","lineNumber":170,"content":""},{"type":"INSERT","lineNumber":171,"content":"        public Move GetNextMove(Board board)"},{"type":"INSERT","lineNumber":172,"content":"        {"},{"type":"INSERT","lineNumber":173,"content":"            Console.WriteLine($\"Player {Symbol} thinking...\");"},{"type":"INSERT","lineNumber":174,"content":"            Thread.Sleep(1000);"},{"type":"INSERT","lineNumber":175,"content":""},{"type":"INSERT","lineNumber":176,"content":"            var bestMove = FindOptimalMove(board);"},{"type":"INSERT","lineNumber":177,"content":"            Console.WriteLine($\"Player {Symbol} plays: {bestMove.Row} {bestMove.Col}\");"},{"type":"INSERT","lineNumber":178,"content":"            Thread.Sleep(500);"},{"type":"INSERT","lineNumber":179,"content":"            "},{"type":"INSERT","lineNumber":180,"content":"            return bestMove;"},{"type":"INSERT","lineNumber":181,"content":"        }"},{"type":"INSERT","lineNumber":182,"content":""},{"type":"INSERT","lineNumber":183,"content":"        private Move FindOptimalMove(Board board)"},{"type":"INSERT","lineNumber":184,"content":"        {"},{"type":"INSERT","lineNumber":185,"content":"            int bestScore = int.MinValue;"},{"type":"INSERT","lineNumber":186,"content":"            var bestMove = new Move(-1, -1);"},{"type":"INSERT","lineNumber":187,"content":""},{"type":"INSERT","lineNumber":188,"content":"            for (int i = 0; i < 3; i++)"},{"type":"INSERT","lineNumber":189,"content":"            {"},{"type":"INSERT","lineNumber":190,"content":"                for (int j = 0; j < 3; j++)"},{"type":"INSERT","lineNumber":191,"content":"                {"},{"type":"INSERT","lineNumber":192,"content":"                    if (board.IsEmpty(i, j))"},{"type":"INSERT","lineNumber":193,"content":"                    {"},{"type":"INSERT","lineNumber":194,"content":"                        board.Set(i, j, Symbol);"},{"type":"INSERT","lineNumber":195,"content":"                        int score = Minimax(board, 0, false);"},{"type":"INSERT","lineNumber":196,"content":"                        board.Remove(i, j);"},{"type":"INSERT","lineNumber":197,"content":""},{"type":"INSERT","lineNumber":198,"content":"                        if (score > bestScore)"},{"type":"INSERT","lineNumber":199,"content":"                        {"},{"type":"INSERT","lineNumber":200,"content":"                            bestScore = score;"},{"type":"INSERT","lineNumber":201,"content":"                            bestMove = new Move(i, j);"},{"type":"INSERT","lineNumber":202,"content":"                        }"},{"type":"INSERT","lineNumber":203,"content":"                    }"},{"type":"INSERT","lineNumber":204,"content":"                }"},{"type":"INSERT","lineNumber":205,"content":"            }"},{"type":"INSERT","lineNumber":206,"content":""},{"type":"INSERT","lineNumber":207,"content":"            return bestMove;"},{"type":"INSERT","lineNumber":208,"content":"        }"},{"type":"INSERT","lineNumber":209,"content":""},{"type":"INSERT","lineNumber":210,"content":"        private int Minimax(Board board, int depth, bool maximizing)"},{"type":"INSERT","lineNumber":211,"content":"        {"},{"type":"INSERT","lineNumber":212,"content":"            if (board.HasWinner(out char winner))"},{"type":"INSERT","lineNumber":213,"content":"            {"},{"type":"INSERT","lineNumber":214,"content":"                if (winner == Symbol) return 10 - depth;"},{"type":"INSERT","lineNumber":215,"content":"                if (winner == opponentSymbol) return depth - 10;"},{"type":"INSERT","lineNumber":216,"content":"            }"},{"type":"INSERT","lineNumber":217,"content":"            "},{"type":"INSERT","lineNumber":218,"content":"            if (board.IsFull()) return 0;"},{"type":"INSERT","lineNumber":219,"content":""},{"type":"INSERT","lineNumber":220,"content":"            if (maximizing)"},{"type":"INSERT","lineNumber":221,"content":"            {"},{"type":"INSERT","lineNumber":222,"content":"                int maxEval = int.MinValue;"},{"type":"INSERT","lineNumber":223,"content":"                for (int i = 0; i < 3; i++)"},{"type":"INSERT","lineNumber":224,"content":"                {"},{"type":"INSERT","lineNumber":225,"content":"                    for (int j = 0; j < 3; j++)"},{"type":"INSERT","lineNumber":226,"content":"                    {"},{"type":"INSERT","lineNumber":227,"content":"                        if (board.IsEmpty(i, j))"},{"type":"INSERT","lineNumber":228,"content":"                        {"},{"type":"INSERT","lineNumber":229,"content":"                            board.Set(i, j, Symbol);"},{"type":"INSERT","lineNumber":230,"content":"                            int eval = Minimax(board, depth + 1, false);"},{"type":"INSERT","lineNumber":231,"content":"                            board.Remove(i, j);"},{"type":"INSERT","lineNumber":232,"content":"                            maxEval = Math.Max(maxEval, eval);"},{"type":"INSERT","lineNumber":233,"content":"                        }"},{"type":"INSERT","lineNumber":234,"content":"                    }"},{"type":"INSERT","lineNumber":235,"content":"                }"},{"type":"INSERT","lineNumber":236,"content":"                return maxEval;"},{"type":"INSERT","lineNumber":237,"content":"            }"},{"type":"INSERT","lineNumber":238,"content":"            else"},{"type":"INSERT","lineNumber":239,"content":"            {"},{"type":"INSERT","lineNumber":240,"content":"                int minEval = int.MaxValue;"},{"type":"INSERT","lineNumber":241,"content":"                for (int i = 0; i < 3; i++)"},{"type":"INSERT","lineNumber":242,"content":"                {"},{"type":"INSERT","lineNumber":243,"content":"                    for (int j = 0; j < 3; j++)"},{"type":"INSERT","lineNumber":244,"content":"                    {"},{"type":"INSERT","lineNumber":245,"content":"                        if (board.IsEmpty(i, j))"},{"type":"INSERT","lineNumber":246,"content":"                        {"},{"type":"INSERT","lineNumber":247,"content":"                            board.Set(i, j, opponentSymbol);"},{"type":"INSERT","lineNumber":248,"content":"                            int eval = Minimax(board, depth + 1, true);"},{"type":"INSERT","lineNumber":249,"content":"                            board.Remove(i, j);"},{"type":"INSERT","lineNumber":250,"content":"                            minEval = Math.Min(minEval, eval);"},{"type":"INSERT","lineNumber":251,"content":"                        }"},{"type":"INSERT","lineNumber":252,"content":"                    }"},{"type":"INSERT","lineNumber":253,"content":"                }"},{"type":"INSERT","lineNumber":254,"content":"                return minEval;"},{"type":"INSERT","lineNumber":255,"content":"            }"},{"type":"INSERT","lineNumber":256,"content":"        }"},{"type":"INSERT","lineNumber":257,"content":"    }"},{"type":"INSERT","lineNumber":258,"content":"}"},{"type":"INSERT","lineNumber":259,"content":""},{"type":"INSERT","lineNumber":260,"content":"// Game.cs"},{"type":"INSERT","lineNumber":261,"content":"namespace TrisGame"},{"type":"INSERT","lineNumber":262,"content":"{"},{"type":"INSERT","lineNumber":263,"content":"    public class Game"},{"type":"INSERT","lineNumber":264,"content":"    {"},{"type":"INSERT","lineNumber":265,"content":"        private Board board;"},{"type":"INSERT","lineNumber":266,"content":"        private IPlayer[] players;"},{"type":"INSERT","lineNumber":267,"content":"        private int currentPlayerIndex;"},{"type":"INSERT","lineNumber":268,"content":""},{"type":"INSERT","lineNumber":269,"content":"        public Game()"},{"type":"INSERT","lineNumber":270,"content":"        {"},{"type":"INSERT","lineNumber":271,"content":"            board = new Board();"},{"type":"INSERT","lineNumber":272,"content":"            players = new IPlayer[]"},{"type":"INSERT","lineNumber":273,"content":"            {"},{"type":"INSERT","lineNumber":274,"content":"                new Human('X'),"},{"type":"INSERT","lineNumber":275,"content":"                new Computer('O')"},{"type":"INSERT","lineNumber":276,"content":"            };"},{"type":"INSERT","lineNumber":277,"content":"            currentPlayerIndex = 0;"},{"type":"INSERT","lineNumber":278,"content":"        }"},{"type":"INSERT","lineNumber":279,"content":""},{"type":"INSERT","lineNumber":280,"content":"        public void Start()"},{"type":"INSERT","lineNumber":281,"content":"        {"},{"type":"INSERT","lineNumber":282,"content":"            Console.WriteLine(\"Tic Tac Toe\");"},{"type":"INSERT","lineNumber":283,"content":"            Console.WriteLine(\"Human: X, Computer: O\\n\");"},{"type":"INSERT","lineNumber":284,"content":""},{"type":"INSERT","lineNumber":285,"content":"            while (true)"},{"type":"INSERT","lineNumber":286,"content":"            {"},{"type":"INSERT","lineNumber":287,"content":"                PlayRound();"},{"type":"INSERT","lineNumber":288,"content":"                "},{"type":"INSERT","lineNumber":289,"content":"                Console.Write(\"Play again? (y/n): \");"},{"type":"INSERT","lineNumber":290,"content":"                if (Console.ReadLine()?.ToLower() != \"y\")"},{"type":"INSERT","lineNumber":291,"content":"                    break;"},{"type":"INSERT","lineNumber":292,"content":"                    "},{"type":"INSERT","lineNumber":293,"content":"                Reset();"},{"type":"INSERT","lineNumber":294,"content":"            }"},{"type":"INSERT","lineNumber":295,"content":"        }"},{"type":"INSERT","lineNumber":296,"content":""},{"type":"INSERT","lineNumber":297,"content":"        private void PlayRound()"},{"type":"INSERT","lineNumber":298,"content":"        {"},{"type":"INSERT","lineNumber":299,"content":"            while (true)"},{"type":"INSERT","lineNumber":300,"content":"            {"},{"type":"INSERT","lineNumber":301,"content":"                Console.Clear();"},{"type":"INSERT","lineNumber":302,"content":"                Console.WriteLine(\"Tic Tac Toe\\n\");"},{"type":"INSERT","lineNumber":303,"content":"                board.Print();"},{"type":"INSERT","lineNumber":304,"content":""},{"type":"INSERT","lineNumber":305,"content":"                var currentPlayer = players[currentPlayerIndex];"},{"type":"INSERT","lineNumber":306,"content":"                var move = currentPlayer.GetNextMove(board);"},{"type":"INSERT","lineNumber":307,"content":"                board.Set(move.Row, move.Col, currentPlayer.Symbol);"},{"type":"INSERT","lineNumber":308,"content":""},{"type":"INSERT","lineNumber":309,"content":"                if (board.HasWinner(out char winner))"},{"type":"INSERT","lineNumber":310,"content":"                {"},{"type":"INSERT","lineNumber":311,"content":"                    Console.Clear();"},{"type":"INSERT","lineNumber":312,"content":"                    Console.WriteLine(\"Tic Tac Toe\\n\");"},{"type":"INSERT","lineNumber":313,"content":"                    board.Print();"},{"type":"INSERT","lineNumber":314,"content":"                    Console.WriteLine($\"Player {winner} wins!\");"},{"type":"INSERT","lineNumber":315,"content":"                    break;"},{"type":"INSERT","lineNumber":316,"content":"                }"},{"type":"INSERT","lineNumber":317,"content":""},{"type":"INSERT","lineNumber":318,"content":"                if (board.IsFull())"},{"type":"INSERT","lineNumber":319,"content":"                {"},{"type":"INSERT","lineNumber":320,"content":"                    Console.Clear();"},{"type":"INSERT","lineNumber":321,"content":"                    Console.WriteLine(\"Tic Tac Toe\\n\");"},{"type":"INSERT","lineNumber":322,"content":"                    board.Print();"},{"type":"INSERT","lineNumber":323,"content":"                    Console.WriteLine(\"It's a tie!\");"},{"type":"INSERT","lineNumber":324,"content":"                    break;"},{"type":"INSERT","lineNumber":325,"content":"                }"},{"type":"INSERT","lineNumber":326,"content":""},{"type":"INSERT","lineNumber":327,"content":"                currentPlayerIndex = 1 - currentPlayerIndex;"},{"type":"INSERT","lineNumber":328,"content":"            }"},{"type":"INSERT","lineNumber":329,"content":"        }"},{"type":"INSERT","lineNumber":330,"content":""},{"type":"INSERT","lineNumber":331,"content":"        private void Reset()"},{"type":"INSERT","lineNumber":332,"content":"        {"},{"type":"INSERT","lineNumber":333,"content":"            board.Clear();"},{"type":"INSERT","lineNumber":334,"content":"            currentPlayerIndex = 0;"},{"type":"INSERT","lineNumber":335,"content":"        }"},{"type":"INSERT","lineNumber":336,"content":"    }"},{"type":"INSERT","lineNumber":337,"content":"}"},{"type":"INSERT","lineNumber":338,"content":""},{"type":"INSERT","lineNumber":339,"content":"// Program.cs"},{"type":"INSERT","lineNumber":340,"content":"namespace TrisGame"},{"type":"INSERT","lineNumber":341,"content":"{"},{"type":"INSERT","lineNumber":342,"content":"    class Program"},{"type":"INSERT","lineNumber":343,"content":"    {"},{"type":"INSERT","lineNumber":344,"content":"        static void Main(string[] args)"},{"type":"INSERT","lineNumber":345,"content":"        {"},{"type":"INSERT","lineNumber":346,"content":"            var game = new Game();"},{"type":"INSERT","lineNumber":347,"content":"            game.Start();"},{"type":"INSERT","lineNumber":348,"content":"        }"},{"type":"INSERT","lineNumber":349,"content":"    }"}]},{"timestamp":1756986131400,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":""},{"type":"DELETE","lineNumber":5,"oldContent":"{"},{"type":"DELETE","lineNumber":8,"oldContent":"}"},{"type":"DELETE","lineNumber":9,"oldContent":"    }"},{"type":"INSERT","lineNumber":6,"content":""},{"type":"DELETE","lineNumber":11,"oldContent":"        }"},{"type":"DELETE","lineNumber":13,"oldContent":"            game.Start();"},{"type":"DELETE","lineNumber":15,"oldContent":"            var game = new Game();"},{"type":"DELETE","lineNumber":17,"oldContent":"        {"},{"type":"DELETE","lineNumber":19,"oldContent":"        static void Main(string[] args)"},{"type":"DELETE","lineNumber":21,"oldContent":"    {"},{"type":"DELETE","lineNumber":23,"oldContent":"    class Program"},{"type":"DELETE","lineNumber":25,"oldContent":"{"},{"type":"DELETE","lineNumber":27,"oldContent":"namespace TrisGame"},{"type":"DELETE","lineNumber":29,"oldContent":"// Program.cs"},{"type":"DELETE","lineNumber":32,"oldContent":""},{"type":"DELETE","lineNumber":33,"oldContent":"}"},{"type":"DELETE","lineNumber":35,"oldContent":"    }"},{"type":"DELETE","lineNumber":37,"oldContent":"        }"},{"type":"DELETE","lineNumber":39,"oldContent":"            currentPlayerIndex = 0;"},{"type":"DELETE","lineNumber":41,"oldContent":"            board.Clear();"},{"type":"DELETE","lineNumber":43,"oldContent":"        {"},{"type":"DELETE","lineNumber":45,"oldContent":"        private void Reset()"},{"type":"DELETE","lineNumber":47,"oldContent":""},{"type":"DELETE","lineNumber":49,"oldContent":"        }"},{"type":"DELETE","lineNumber":51,"oldContent":"            }"},{"type":"DELETE","lineNumber":53,"oldContent":"                currentPlayerIndex = 1 - currentPlayerIndex;"},{"type":"DELETE","lineNumber":55,"oldContent":""},{"type":"DELETE","lineNumber":57,"oldContent":"                }"},{"type":"DELETE","lineNumber":59,"oldContent":"                    break;"},{"type":"DELETE","lineNumber":61,"oldContent":"                    Console.WriteLine(\"It's a tie!\");"},{"type":"DELETE","lineNumber":63,"oldContent":"                    board.Print();"},{"type":"DELETE","lineNumber":65,"oldContent":"                    Console.WriteLine(\"Tic Tac Toe\\n\");"},{"type":"DELETE","lineNumber":67,"oldContent":"                    Console.Clear();"},{"type":"DELETE","lineNumber":69,"oldContent":"                {"},{"type":"DELETE","lineNumber":71,"oldContent":"                if (board.IsFull())"},{"type":"DELETE","lineNumber":74,"oldContent":""},{"type":"DELETE","lineNumber":75,"oldContent":"                }"},{"type":"DELETE","lineNumber":77,"oldContent":"                    break;"},{"type":"DELETE","lineNumber":79,"oldContent":"                    Console.WriteLine($\"Player {winner} wins!\");"},{"type":"DELETE","lineNumber":81,"oldContent":"                    board.Print();"},{"type":"DELETE","lineNumber":83,"oldContent":"                    Console.WriteLine(\"Tic Tac Toe\\n\");"},{"type":"DELETE","lineNumber":85,"oldContent":"                    Console.Clear();"},{"type":"DELETE","lineNumber":87,"oldContent":"                {"},{"type":"DELETE","lineNumber":89,"oldContent":"                if (board.HasWinner(out char winner))"},{"type":"DELETE","lineNumber":91,"oldContent":""},{"type":"DELETE","lineNumber":93,"oldContent":"                board.Set(move.Row, move.Col, currentPlayer.Symbol);"},{"type":"DELETE","lineNumber":95,"oldContent":"                var move = currentPlayer.GetNextMove(board);"},{"type":"DELETE","lineNumber":97,"oldContent":"                var currentPlayer = players[currentPlayerIndex];"},{"type":"DELETE","lineNumber":99,"oldContent":""},{"type":"DELETE","lineNumber":101,"oldContent":"                board.Print();"},{"type":"DELETE","lineNumber":103,"oldContent":"                Console.WriteLine(\"Tic Tac Toe\\n\");"},{"type":"DELETE","lineNumber":105,"oldContent":"                Console.Clear();"},{"type":"DELETE","lineNumber":107,"oldContent":"            {"},{"type":"DELETE","lineNumber":109,"oldContent":"            while (true)"},{"type":"DELETE","lineNumber":111,"oldContent":"        {"},{"type":"DELETE","lineNumber":113,"oldContent":"        private void PlayRound()"},{"type":"DELETE","lineNumber":115,"oldContent":""},{"type":"DELETE","lineNumber":117,"oldContent":"        }"},{"type":"DELETE","lineNumber":119,"oldContent":"            }"},{"type":"DELETE","lineNumber":121,"oldContent":"                Reset();"},{"type":"DELETE","lineNumber":123,"oldContent":"                    "},{"type":"DELETE","lineNumber":125,"oldContent":"                    break;"},{"type":"DELETE","lineNumber":127,"oldContent":"                if (Console.ReadLine()?.ToLower() != \"y\")"},{"type":"DELETE","lineNumber":129,"oldContent":"                Console.Write(\"Play again? (y/n): \");"},{"type":"DELETE","lineNumber":131,"oldContent":"                "},{"type":"DELETE","lineNumber":133,"oldContent":"                PlayRound();"},{"type":"DELETE","lineNumber":135,"oldContent":"            {"},{"type":"DELETE","lineNumber":137,"oldContent":"            while (true)"},{"type":"DELETE","lineNumber":139,"oldContent":""},{"type":"DELETE","lineNumber":141,"oldContent":"            Console.WriteLine(\"Human: X, Computer: O\\n\");"},{"type":"DELETE","lineNumber":143,"oldContent":"            Console.WriteLine(\"Tic Tac Toe\");"},{"type":"DELETE","lineNumber":146,"oldContent":"        {"},{"type":"DELETE","lineNumber":147,"oldContent":"        public void Start()"},{"type":"DELETE","lineNumber":149,"oldContent":""},{"type":"DELETE","lineNumber":151,"oldContent":"        }"},{"type":"DELETE","lineNumber":153,"oldContent":"            currentPlayerIndex = 0;"},{"type":"DELETE","lineNumber":155,"oldContent":"            };"},{"type":"DELETE","lineNumber":157,"oldContent":"                new Computer('O')"},{"type":"DELETE","lineNumber":159,"oldContent":"                new Human('X'),"},{"type":"DELETE","lineNumber":161,"oldContent":"            {"},{"type":"DELETE","lineNumber":163,"oldContent":"            players = new IPlayer[]"},{"type":"DELETE","lineNumber":165,"oldContent":"            board = new Board();"},{"type":"DELETE","lineNumber":167,"oldContent":"        {"},{"type":"DELETE","lineNumber":169,"oldContent":"        public Game()"},{"type":"DELETE","lineNumber":171,"oldContent":""},{"type":"DELETE","lineNumber":173,"oldContent":"        private int currentPlayerIndex;"},{"type":"DELETE","lineNumber":175,"oldContent":"        private IPlayer[] players;"},{"type":"DELETE","lineNumber":177,"oldContent":"        private Board board;"},{"type":"DELETE","lineNumber":179,"oldContent":"    {"},{"type":"DELETE","lineNumber":181,"oldContent":"    public class Game"},{"type":"DELETE","lineNumber":183,"oldContent":"{"},{"type":"DELETE","lineNumber":185,"oldContent":"namespace TrisGame"},{"type":"DELETE","lineNumber":187,"oldContent":"// Game.cs"},{"type":"DELETE","lineNumber":189,"oldContent":""},{"type":"DELETE","lineNumber":191,"oldContent":"}"},{"type":"DELETE","lineNumber":194,"oldContent":"    }"},{"type":"DELETE","lineNumber":195,"oldContent":"        }"},{"type":"DELETE","lineNumber":197,"oldContent":"            }"},{"type":"DELETE","lineNumber":199,"oldContent":"                return minEval;"},{"type":"DELETE","lineNumber":201,"oldContent":"                }"},{"type":"DELETE","lineNumber":203,"oldContent":"                    }"},{"type":"DELETE","lineNumber":204,"oldContent":"                        }"},{"type":"INSERT","lineNumber":104,"content":"{"},{"type":"DELETE","lineNumber":206,"oldContent":"                            minEval = Math.Min(minEval, eval);"},{"type":"DELETE","lineNumber":208,"oldContent":"                            board.Remove(i, j);"},{"type":"DELETE","lineNumber":210,"oldContent":"                            int eval = Minimax(board, depth + 1, true);"},{"type":"DELETE","lineNumber":212,"oldContent":"                            board.Set(i, j, opponentSymbol);"},{"type":"DELETE","lineNumber":214,"oldContent":"                        {"},{"type":"DELETE","lineNumber":216,"oldContent":"                        if (board.IsEmpty(i, j))"},{"type":"DELETE","lineNumber":218,"oldContent":"                    {"},{"type":"DELETE","lineNumber":220,"oldContent":"                    for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":222,"oldContent":"                {"},{"type":"DELETE","lineNumber":224,"oldContent":"                for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":226,"oldContent":"                int minEval = int.MaxValue;"},{"type":"DELETE","lineNumber":228,"oldContent":"            {"},{"type":"DELETE","lineNumber":230,"oldContent":"            else"},{"type":"DELETE","lineNumber":232,"oldContent":"            }"},{"type":"DELETE","lineNumber":234,"oldContent":"                return maxEval;"},{"type":"DELETE","lineNumber":236,"oldContent":"                }"},{"type":"DELETE","lineNumber":238,"oldContent":"                    }"},{"type":"DELETE","lineNumber":239,"oldContent":"                        }"},{"type":"DELETE","lineNumber":240,"oldContent":""},{"type":"DELETE","lineNumber":241,"oldContent":"                            maxEval = Math.Max(maxEval, eval);"},{"type":"DELETE","lineNumber":242,"oldContent":"// Human.cs"},{"type":"DELETE","lineNumber":243,"oldContent":"                            board.Remove(i, j);"},{"type":"DELETE","lineNumber":244,"oldContent":"namespace TrisGame"},{"type":"DELETE","lineNumber":245,"oldContent":"                            int eval = Minimax(board, depth + 1, false);"},{"type":"DELETE","lineNumber":246,"oldContent":"{"},{"type":"DELETE","lineNumber":247,"oldContent":"                            board.Set(i, j, Symbol);"},{"type":"DELETE","lineNumber":248,"oldContent":"    public class Human : IPlayer"},{"type":"DELETE","lineNumber":249,"oldContent":"                        {"},{"type":"DELETE","lineNumber":250,"oldContent":"    {"},{"type":"DELETE","lineNumber":251,"oldContent":"                        if (board.IsEmpty(i, j))"},{"type":"DELETE","lineNumber":252,"oldContent":"        public char Symbol { get; private set; }"},{"type":"DELETE","lineNumber":253,"oldContent":"                    {"},{"type":"DELETE","lineNumber":254,"oldContent":""},{"type":"DELETE","lineNumber":255,"oldContent":"                    for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":256,"oldContent":"        public Human(char symbol)"},{"type":"DELETE","lineNumber":257,"oldContent":"                {"},{"type":"DELETE","lineNumber":258,"oldContent":"        {"},{"type":"DELETE","lineNumber":259,"oldContent":"                for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":260,"oldContent":"            Symbol = symbol;"},{"type":"DELETE","lineNumber":261,"oldContent":"                int maxEval = int.MinValue;"},{"type":"DELETE","lineNumber":262,"oldContent":"        }"},{"type":"DELETE","lineNumber":263,"oldContent":"            {"},{"type":"DELETE","lineNumber":264,"oldContent":""},{"type":"DELETE","lineNumber":265,"oldContent":"            if (maximizing)"},{"type":"DELETE","lineNumber":266,"oldContent":"        public Move GetNextMove(Board board)"},{"type":"DELETE","lineNumber":267,"oldContent":""},{"type":"DELETE","lineNumber":268,"oldContent":"        {"},{"type":"DELETE","lineNumber":269,"oldContent":"            if (board.IsFull()) return 0;"},{"type":"DELETE","lineNumber":270,"oldContent":"            while (true)"},{"type":"DELETE","lineNumber":271,"oldContent":"            "},{"type":"DELETE","lineNumber":272,"oldContent":"            {"},{"type":"DELETE","lineNumber":273,"oldContent":"            }"},{"type":"DELETE","lineNumber":274,"oldContent":"                Console.Write($\"Player {Symbol} - enter row and column (0-2): \");"},{"type":"DELETE","lineNumber":275,"oldContent":"                if (winner == opponentSymbol) return depth - 10;"},{"type":"DELETE","lineNumber":276,"oldContent":"                var input = Console.ReadLine()?.Split();"},{"type":"DELETE","lineNumber":277,"oldContent":"                if (winner == Symbol) return 10 - depth;"},{"type":"DELETE","lineNumber":278,"oldContent":"                "},{"type":"DELETE","lineNumber":279,"oldContent":"            {"},{"type":"DELETE","lineNumber":280,"oldContent":"                if (input?.Length == 2 && "},{"type":"DELETE","lineNumber":281,"oldContent":"            if (board.HasWinner(out char winner))"},{"type":"DELETE","lineNumber":282,"oldContent":"                    int.TryParse(input[0], out int row) && "},{"type":"DELETE","lineNumber":283,"oldContent":"        {"},{"type":"DELETE","lineNumber":284,"oldContent":"                    int.TryParse(input[1], out int col) &&"},{"type":"DELETE","lineNumber":285,"oldContent":"        private int Minimax(Board board, int depth, bool maximizing)"},{"type":"DELETE","lineNumber":286,"oldContent":"                    board.IsEmpty(row, col))"},{"type":"DELETE","lineNumber":287,"oldContent":""},{"type":"DELETE","lineNumber":288,"oldContent":"                {"},{"type":"DELETE","lineNumber":289,"oldContent":"        }"},{"type":"DELETE","lineNumber":290,"oldContent":"                    return new Move(row, col);"},{"type":"DELETE","lineNumber":291,"oldContent":"            return bestMove;"},{"type":"DELETE","lineNumber":292,"oldContent":"                }"},{"type":"DELETE","lineNumber":293,"oldContent":""},{"type":"DELETE","lineNumber":294,"oldContent":"                "},{"type":"DELETE","lineNumber":295,"oldContent":"            }"},{"type":"DELETE","lineNumber":296,"oldContent":"                Console.WriteLine(\"Invalid move, try again.\");"},{"type":"DELETE","lineNumber":297,"oldContent":"                }"},{"type":"DELETE","lineNumber":298,"oldContent":"            }"},{"type":"DELETE","lineNumber":299,"oldContent":"                    }"},{"type":"DELETE","lineNumber":300,"oldContent":"        }"},{"type":"DELETE","lineNumber":301,"oldContent":"                        }"},{"type":"DELETE","lineNumber":302,"oldContent":"    }"},{"type":"DELETE","lineNumber":303,"oldContent":"                            bestMove = new Move(i, j);"},{"type":"DELETE","lineNumber":305,"oldContent":"                            bestScore = score;"},{"type":"DELETE","lineNumber":306,"oldContent":""},{"type":"DELETE","lineNumber":307,"oldContent":"                        {"},{"type":"DELETE","lineNumber":308,"oldContent":"// Computer.cs"},{"type":"DELETE","lineNumber":309,"oldContent":"                        if (score > bestScore)"},{"type":"DELETE","lineNumber":310,"oldContent":"namespace TrisGame"},{"type":"DELETE","lineNumber":311,"oldContent":""},{"type":"DELETE","lineNumber":312,"oldContent":"{"},{"type":"DELETE","lineNumber":313,"oldContent":"                        board.Remove(i, j);"},{"type":"DELETE","lineNumber":314,"oldContent":"    public class Computer : IPlayer"},{"type":"DELETE","lineNumber":315,"oldContent":"                        int score = Minimax(board, 0, false);"},{"type":"DELETE","lineNumber":316,"oldContent":"    {"},{"type":"DELETE","lineNumber":317,"oldContent":"                        board.Set(i, j, Symbol);"},{"type":"DELETE","lineNumber":318,"oldContent":"        public char Symbol { get; private set; }"},{"type":"DELETE","lineNumber":319,"oldContent":"                    {"},{"type":"DELETE","lineNumber":320,"oldContent":"        private char opponentSymbol;"},{"type":"DELETE","lineNumber":321,"oldContent":"                    if (board.IsEmpty(i, j))"},{"type":"DELETE","lineNumber":322,"oldContent":""},{"type":"DELETE","lineNumber":323,"oldContent":"                {"},{"type":"DELETE","lineNumber":324,"oldContent":"        public Computer(char symbol)"},{"type":"DELETE","lineNumber":325,"oldContent":"                for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":326,"oldContent":"        {"},{"type":"DELETE","lineNumber":327,"oldContent":"            {"},{"type":"DELETE","lineNumber":328,"oldContent":"            Symbol = symbol;"},{"type":"DELETE","lineNumber":329,"oldContent":"            for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":330,"oldContent":"            opponentSymbol = symbol == 'X' ? 'O' : 'X';"},{"type":"DELETE","lineNumber":331,"oldContent":""},{"type":"DELETE","lineNumber":332,"oldContent":"        }"},{"type":"DELETE","lineNumber":333,"oldContent":"            var bestMove = new Move(-1, -1);"},{"type":"DELETE","lineNumber":334,"oldContent":""},{"type":"DELETE","lineNumber":335,"oldContent":"            int bestScore = int.MinValue;"},{"type":"DELETE","lineNumber":336,"oldContent":"        public Move GetNextMove(Board board)"},{"type":"DELETE","lineNumber":337,"oldContent":"        {"},{"type":"DELETE","lineNumber":338,"oldContent":"        {"},{"type":"DELETE","lineNumber":339,"oldContent":"        private Move FindOptimalMove(Board board)"},{"type":"DELETE","lineNumber":340,"oldContent":"            Console.WriteLine($\"Player {Symbol} thinking...\");"},{"type":"DELETE","lineNumber":341,"oldContent":""},{"type":"DELETE","lineNumber":342,"oldContent":"            Thread.Sleep(1000);"},{"type":"DELETE","lineNumber":343,"oldContent":"        }"},{"type":"DELETE","lineNumber":344,"oldContent":""},{"type":"DELETE","lineNumber":345,"oldContent":"            return bestMove;"},{"type":"DELETE","lineNumber":346,"oldContent":"            var bestMove = FindOptimalMove(board);"},{"type":"DELETE","lineNumber":347,"oldContent":"            "},{"type":"DELETE","lineNumber":348,"oldContent":"            Console.WriteLine($\"Player {Symbol} plays: {bestMove.Row} {bestMove.Col}\");"},{"type":"DELETE","lineNumber":349,"oldContent":"            Thread.Sleep(500);"}]},{"timestamp":1756986138665,"changes":[{"type":"DELETE","lineNumber":0,"oldContent":"// Board.cs"},{"type":"DELETE","lineNumber":3,"oldContent":"    public class Board"},{"type":"DELETE","lineNumber":4,"oldContent":""},{"type":"DELETE","lineNumber":5,"oldContent":"    {"},{"type":"DELETE","lineNumber":6,"oldContent":"        private char[,] cells = new char[3, 3];"},{"type":"DELETE","lineNumber":7,"oldContent":"        public Board()"},{"type":"DELETE","lineNumber":8,"oldContent":"        {"},{"type":"DELETE","lineNumber":9,"oldContent":"            Clear();"},{"type":"DELETE","lineNumber":10,"oldContent":"        }"},{"type":"DELETE","lineNumber":11,"oldContent":""},{"type":"DELETE","lineNumber":12,"oldContent":"        public void Clear()"},{"type":"DELETE","lineNumber":13,"oldContent":"        {"},{"type":"DELETE","lineNumber":14,"oldContent":"            for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":15,"oldContent":"                for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":16,"oldContent":"                    cells[i, j] = ' ';"},{"type":"DELETE","lineNumber":17,"oldContent":"        }"},{"type":"DELETE","lineNumber":18,"oldContent":""},{"type":"DELETE","lineNumber":19,"oldContent":"        public bool IsEmpty(int row, int col)"},{"type":"DELETE","lineNumber":20,"oldContent":"        {"},{"type":"DELETE","lineNumber":21,"oldContent":"            return row >= 0 && row < 3 && col >= 0 && col < 3 && cells[row, col] == ' ';"},{"type":"DELETE","lineNumber":22,"oldContent":"        }"},{"type":"DELETE","lineNumber":23,"oldContent":""},{"type":"DELETE","lineNumber":24,"oldContent":"        public void Set(int row, int col, char symbol)"},{"type":"DELETE","lineNumber":25,"oldContent":"        {"},{"type":"DELETE","lineNumber":26,"oldContent":"            if (IsEmpty(row, col))"},{"type":"DELETE","lineNumber":27,"oldContent":"                cells[row, col] = symbol;"},{"type":"DELETE","lineNumber":28,"oldContent":"        }"},{"type":"DELETE","lineNumber":29,"oldContent":""},{"type":"DELETE","lineNumber":30,"oldContent":"        public void Remove(int row, int col)"},{"type":"DELETE","lineNumber":31,"oldContent":"        {"},{"type":"DELETE","lineNumber":32,"oldContent":"            cells[row, col] = ' ';"},{"type":"DELETE","lineNumber":33,"oldContent":"        }"},{"type":"DELETE","lineNumber":34,"oldContent":""},{"type":"DELETE","lineNumber":35,"oldContent":"        public char Get(int row, int col)"},{"type":"DELETE","lineNumber":36,"oldContent":"        {"},{"type":"DELETE","lineNumber":37,"oldContent":"            return cells[row, col];"},{"type":"DELETE","lineNumber":38,"oldContent":"        }"},{"type":"DELETE","lineNumber":39,"oldContent":""},{"type":"DELETE","lineNumber":40,"oldContent":"        public bool HasWinner(out char winner)"},{"type":"DELETE","lineNumber":41,"oldContent":"        {"},{"type":"DELETE","lineNumber":42,"oldContent":"            winner = ' ';"},{"type":"DELETE","lineNumber":43,"oldContent":""},{"type":"DELETE","lineNumber":44,"oldContent":"            // Check rows and columns"},{"type":"DELETE","lineNumber":45,"oldContent":"            for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":46,"oldContent":"            {"},{"type":"DELETE","lineNumber":47,"oldContent":"                if (cells[i, 0] != ' ' && cells[i, 0] == cells[i, 1] && cells[i, 1] == cells[i, 2])"},{"type":"DELETE","lineNumber":48,"oldContent":"                {"},{"type":"DELETE","lineNumber":49,"oldContent":"                    winner = cells[i, 0];"},{"type":"DELETE","lineNumber":50,"oldContent":"                    return true;"},{"type":"DELETE","lineNumber":51,"oldContent":"                }"},{"type":"DELETE","lineNumber":52,"oldContent":"                if (cells[0, i] != ' ' && cells[0, i] == cells[1, i] && cells[1, i] == cells[2, i])"},{"type":"DELETE","lineNumber":53,"oldContent":"                {"},{"type":"DELETE","lineNumber":54,"oldContent":"{"},{"type":"DELETE","lineNumber":55,"oldContent":"                    winner = cells[0, i];"},{"type":"DELETE","lineNumber":56,"oldContent":"                    return true;"},{"type":"DELETE","lineNumber":57,"oldContent":"                }"},{"type":"DELETE","lineNumber":58,"oldContent":"            }"},{"type":"DELETE","lineNumber":59,"oldContent":""},{"type":"DELETE","lineNumber":60,"oldContent":"            // Check diagonals"},{"type":"DELETE","lineNumber":61,"oldContent":"            if (cells[0, 0] != ' ' && cells[0, 0] == cells[1, 1] && cells[1, 1] == cells[2, 2])"},{"type":"DELETE","lineNumber":62,"oldContent":"            {"},{"type":"DELETE","lineNumber":63,"oldContent":"                winner = cells[0, 0];"},{"type":"DELETE","lineNumber":64,"oldContent":"                return true;"},{"type":"DELETE","lineNumber":65,"oldContent":"            }"},{"type":"DELETE","lineNumber":66,"oldContent":"            if (cells[0, 2] != ' ' && cells[0, 2] == cells[1, 1] && cells[1, 1] == cells[2, 0])"},{"type":"DELETE","lineNumber":67,"oldContent":"            {"},{"type":"DELETE","lineNumber":68,"oldContent":"                winner = cells[0, 2];"},{"type":"DELETE","lineNumber":69,"oldContent":"                return true;"},{"type":"DELETE","lineNumber":70,"oldContent":"            }"},{"type":"DELETE","lineNumber":71,"oldContent":""},{"type":"DELETE","lineNumber":72,"oldContent":"            return false;"},{"type":"DELETE","lineNumber":73,"oldContent":"        }"},{"type":"DELETE","lineNumber":74,"oldContent":""},{"type":"DELETE","lineNumber":75,"oldContent":"        public bool IsFull()"},{"type":"DELETE","lineNumber":76,"oldContent":"        {"},{"type":"DELETE","lineNumber":77,"oldContent":"            for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":78,"oldContent":"                for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":79,"oldContent":"                    if (cells[i, j] == ' ')"},{"type":"DELETE","lineNumber":80,"oldContent":"                        return false;"},{"type":"DELETE","lineNumber":81,"oldContent":"            return true;"},{"type":"DELETE","lineNumber":82,"oldContent":"        }"},{"type":"DELETE","lineNumber":83,"oldContent":""},{"type":"DELETE","lineNumber":84,"oldContent":"        public void Print()"},{"type":"DELETE","lineNumber":85,"oldContent":"        {"},{"type":"DELETE","lineNumber":86,"oldContent":"            Console.WriteLine();"},{"type":"DELETE","lineNumber":87,"oldContent":"            for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":88,"oldContent":"            {"},{"type":"DELETE","lineNumber":89,"oldContent":"                Console.Write(\" \");"},{"type":"DELETE","lineNumber":90,"oldContent":"                for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":91,"oldContent":"                {"},{"type":"DELETE","lineNumber":92,"oldContent":"                    Console.Write(cells[i, j]);"},{"type":"DELETE","lineNumber":93,"oldContent":"                    if (j < 2) Console.Write(\" | \");"},{"type":"DELETE","lineNumber":94,"oldContent":"                }"},{"type":"DELETE","lineNumber":95,"oldContent":"                Console.WriteLine();"},{"type":"DELETE","lineNumber":96,"oldContent":"                if (i < 2) Console.WriteLine(\"---|---|---\");"},{"type":"DELETE","lineNumber":97,"oldContent":"            }"},{"type":"DELETE","lineNumber":98,"oldContent":"            Console.WriteLine();"},{"type":"DELETE","lineNumber":99,"oldContent":"        }"},{"type":"DELETE","lineNumber":100,"oldContent":"    }"},{"type":"DELETE","lineNumber":101,"oldContent":"}"},{"type":"DELETE","lineNumber":102,"oldContent":""},{"type":"DELETE","lineNumber":103,"oldContent":"// Move.cs"},{"type":"DELETE","lineNumber":104,"oldContent":"namespace TrisGame"}]},{"timestamp":1756986212915,"changes":[{"type":"DELETE","lineNumber":14,"oldContent":"    public interface IPlayer"},{"type":"DELETE","lineNumber":15,"oldContent":"    {"},{"type":"DELETE","lineNumber":16,"oldContent":"        char Symbol { get; }"},{"type":"DELETE","lineNumber":17,"oldContent":"        Move GetNextMove(Board board);"},{"type":"DELETE","lineNumber":18,"oldContent":"    }"},{"type":"INSERT","lineNumber":14,"content":"    "}]},{"timestamp":1756986426042,"changes":[{"type":"MODIFY","lineNumber":14,"content":"    public interface IPlayer","oldContent":"    "},{"type":"INSERT","lineNumber":15,"content":"    {"},{"type":"INSERT","lineNumber":16,"content":"        char Symbol { get; }"},{"type":"INSERT","lineNumber":17,"content":"        Move GetNextMove(Board board);"},{"type":"INSERT","lineNumber":18,"content":"    }"}]},{"timestamp":1756986430903,"changes":[{"type":"DELETE","lineNumber":13,"oldContent":""},{"type":"DELETE","lineNumber":14,"oldContent":"    public interface IPlayer"},{"type":"DELETE","lineNumber":15,"oldContent":"    {"},{"type":"DELETE","lineNumber":17,"oldContent":"        char Symbol { get; }"},{"type":"DELETE","lineNumber":18,"oldContent":"    }"},{"type":"DELETE","lineNumber":19,"oldContent":"        Move GetNextMove(Board board);"}]}]},"C:/Users/tagli/RiderProjects/TrisGame/TrisGame/Human.cs":{"filePath":"C:/Users/tagli/RiderProjects/TrisGame/TrisGame/Human.cs","baseContent":"// Board.cs\nnamespace TrisGame\n{\n    public class Board\n    {\n        private char[,] cells = new char[3, 3];\n\n        public Board()\n        {\n            Clear();\n        }\n\n        public void Clear()\n        {\n            for (int i = 0; i < 3; i++)\n                for (int j = 0; j < 3; j++)\n                    cells[i, j] = ' ';\n        }\n\n        public bool IsEmpty(int row, int col)\n        {\n            return row >= 0 && row < 3 && col >= 0 && col < 3 && cells[row, col] == ' ';\n        }\n\n        public void Set(int row, int col, char symbol)\n        {\n            if (IsEmpty(row, col))\n                cells[row, col] = symbol;\n        }\n\n        public void Remove(int row, int col)\n        {\n            cells[row, col] = ' ';\n        }\n\n        public char Get(int row, int col)\n        {\n            return cells[row, col];\n        }\n\n        public bool HasWinner(out char winner)\n        {\n            winner = ' ';\n\n            // Check rows and columns\n            for (int i = 0; i < 3; i++)\n            {\n                if (cells[i, 0] != ' ' && cells[i, 0] == cells[i, 1] && cells[i, 1] == cells[i, 2])\n                {\n                    winner = cells[i, 0];\n                    return true;\n                }\n                if (cells[0, i] != ' ' && cells[0, i] == cells[1, i] && cells[1, i] == cells[2, i])\n                {\n                    winner = cells[0, i];\n                    return true;\n                }\n            }\n\n            // Check diagonals\n            if (cells[0, 0] != ' ' && cells[0, 0] == cells[1, 1] && cells[1, 1] == cells[2, 2])\n            {\n                winner = cells[0, 0];\n                return true;\n            }\n            if (cells[0, 2] != ' ' && cells[0, 2] == cells[1, 1] && cells[1, 1] == cells[2, 0])\n            {\n                winner = cells[0, 2];\n                return true;\n            }\n\n            return false;\n        }\n\n        public bool IsFull()\n        {\n            for (int i = 0; i < 3; i++)\n                for (int j = 0; j < 3; j++)\n                    if (cells[i, j] == ' ')\n                        return false;\n            return true;\n        }\n\n        public void Print()\n        {\n            Console.WriteLine();\n            for (int i = 0; i < 3; i++)\n            {\n                Console.Write(\" \");\n                for (int j = 0; j < 3; j++)\n                {\n                    Console.Write(cells[i, j]);\n                    if (j < 2) Console.Write(\" | \");\n                }\n                Console.WriteLine();\n                if (i < 2) Console.WriteLine(\"---|---|---\");\n            }\n            Console.WriteLine();\n        }\n    }\n}\n\n// Move.cs\nnamespace TrisGame\n{\n    public struct Move\n    {\n        public int Row { get; set; }\n        public int Col { get; set; }\n\n        public Move(int row, int col)\n        {\n            Row = row;\n            Col = col;\n        }\n    }\n\n    public interface IPlayer\n    {\n        char Symbol { get; }\n        Move GetNextMove(Board board);\n    }\n}\n\n// Human.cs\nnamespace TrisGame\n{\n    public class Human : IPlayer\n    {\n        public char Symbol { get; private set; }\n\n        public Human(char symbol)\n        {\n            Symbol = symbol;\n        }\n\n        public Move GetNextMove(Board board)\n        {\n            while (true)\n            {\n                Console.Write($\"Player {Symbol} - enter row and column (0-2): \");\n                var input = Console.ReadLine()?.Split();\n                \n                if (input?.Length == 2 && \n                    int.TryParse(input[0], out int row) && \n                    int.TryParse(input[1], out int col) &&\n                    board.IsEmpty(row, col))\n                {\n                    return new Move(row, col);\n                }\n                \n                Console.WriteLine(\"Invalid move, try again.\");\n            }\n        }\n    }\n}\n\n// Computer.cs\nnamespace TrisGame\n{\n    public class Computer : IPlayer\n    {\n        public char Symbol { get; private set; }\n        private char opponentSymbol;\n\n        public Computer(char symbol)\n        {\n            Symbol = symbol;\n            opponentSymbol = symbol == 'X' ? 'O' : 'X';\n        }\n\n        public Move GetNextMove(Board board)\n        {\n            Console.WriteLine($\"Player {Symbol} thinking...\");\n            Thread.Sleep(1000);\n\n            var bestMove = FindOptimalMove(board);\n            Console.WriteLine($\"Player {Symbol} plays: {bestMove.Row} {bestMove.Col}\");\n            Thread.Sleep(500);\n            \n            return bestMove;\n        }\n\n        private Move FindOptimalMove(Board board)\n        {\n            int bestScore = int.MinValue;\n            var bestMove = new Move(-1, -1);\n\n            for (int i = 0; i < 3; i++)\n            {\n                for (int j = 0; j < 3; j++)\n                {\n                    if (board.IsEmpty(i, j))\n                    {\n                        board.Set(i, j, Symbol);\n                        int score = Minimax(board, 0, false);\n                        board.Remove(i, j);\n\n                        if (score > bestScore)\n                        {\n                            bestScore = score;\n                            bestMove = new Move(i, j);\n                        }\n                    }\n                }\n            }\n\n            return bestMove;\n        }\n\n        private int Minimax(Board board, int depth, bool maximizing)\n        {\n            if (board.HasWinner(out char winner))\n            {\n                if (winner == Symbol) return 10 - depth;\n                if (winner == opponentSymbol) return depth - 10;\n            }\n            \n            if (board.IsFull()) return 0;\n\n            if (maximizing)\n            {\n                int maxEval = int.MinValue;\n                for (int i = 0; i < 3; i++)\n                {\n                    for (int j = 0; j < 3; j++)\n                    {\n                        if (board.IsEmpty(i, j))\n                        {\n                            board.Set(i, j, Symbol);\n                            int eval = Minimax(board, depth + 1, false);\n                            board.Remove(i, j);\n                            maxEval = Math.Max(maxEval, eval);\n                        }\n                    }\n                }\n                return maxEval;\n            }\n            else\n            {\n                int minEval = int.MaxValue;\n                for (int i = 0; i < 3; i++)\n                {\n                    for (int j = 0; j < 3; j++)\n                    {\n                        if (board.IsEmpty(i, j))\n                        {\n                            board.Set(i, j, opponentSymbol);\n                            int eval = Minimax(board, depth + 1, true);\n                            board.Remove(i, j);\n                            minEval = Math.Min(minEval, eval);\n                        }\n                    }\n                }\n                return minEval;\n            }\n        }\n    }\n}\n\n// Game.cs\nnamespace TrisGame\n{\n    public class Game\n    {\n        private Board board;\n        private IPlayer[] players;\n        private int currentPlayerIndex;\n\n        public Game()\n        {\n            board = new Board();\n            players = new IPlayer[]\n            {\n                new Human('X'),\n                new Computer('O')\n            };\n            currentPlayerIndex = 0;\n        }\n\n        public void Start()\n        {\n            Console.WriteLine(\"Tic Tac Toe\");\n            Console.WriteLine(\"Human: X, Computer: O\\n\");\n\n            while (true)\n            {\n                PlayRound();\n                \n                Console.Write(\"Play again? (y/n): \");\n                if (Console.ReadLine()?.ToLower() != \"y\")\n                    break;\n                    \n                Reset();\n            }\n        }\n\n        private void PlayRound()\n        {\n            while (true)\n            {\n                Console.Clear();\n                Console.WriteLine(\"Tic Tac Toe\\n\");\n                board.Print();\n\n                var currentPlayer = players[currentPlayerIndex];\n                var move = currentPlayer.GetNextMove(board);\n                board.Set(move.Row, move.Col, currentPlayer.Symbol);\n\n                if (board.HasWinner(out char winner))\n                {\n                    Console.Clear();\n                    Console.WriteLine(\"Tic Tac Toe\\n\");\n                    board.Print();\n                    Console.WriteLine($\"Player {winner} wins!\");\n                    break;\n                }\n\n                if (board.IsFull())\n                {\n                    Console.Clear();\n                    Console.WriteLine(\"Tic Tac Toe\\n\");\n                    board.Print();\n                    Console.WriteLine(\"It's a tie!\");\n                    break;\n                }\n\n                currentPlayerIndex = 1 - currentPlayerIndex;\n            }\n        }\n\n        private void Reset()\n        {\n            board.Clear();\n            currentPlayerIndex = 0;\n        }\n    }\n}\n\n// Program.cs\nnamespace TrisGame\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var game = new Game();\n            game.Start();\n        }\n    }","baseTimestamp":1756986147852,"deltas":[{"timestamp":1756986157757,"changes":[{"type":"DELETE","lineNumber":157,"oldContent":"// Computer.cs"},{"type":"DELETE","lineNumber":158,"oldContent":"namespace TrisGame"},{"type":"DELETE","lineNumber":159,"oldContent":"{"},{"type":"DELETE","lineNumber":160,"oldContent":"    public class Computer : IPlayer"},{"type":"DELETE","lineNumber":161,"oldContent":"    {"},{"type":"DELETE","lineNumber":162,"oldContent":"        public char Symbol { get; private set; }"},{"type":"DELETE","lineNumber":163,"oldContent":"        private char opponentSymbol;"},{"type":"DELETE","lineNumber":164,"oldContent":""},{"type":"DELETE","lineNumber":165,"oldContent":"        public Computer(char symbol)"},{"type":"DELETE","lineNumber":166,"oldContent":"        {"},{"type":"DELETE","lineNumber":167,"oldContent":"            Symbol = symbol;"},{"type":"DELETE","lineNumber":168,"oldContent":"            opponentSymbol = symbol == 'X' ? 'O' : 'X';"},{"type":"DELETE","lineNumber":169,"oldContent":"        }"},{"type":"DELETE","lineNumber":170,"oldContent":""},{"type":"DELETE","lineNumber":171,"oldContent":"        public Move GetNextMove(Board board)"},{"type":"DELETE","lineNumber":172,"oldContent":"        {"},{"type":"DELETE","lineNumber":173,"oldContent":"            Console.WriteLine($\"Player {Symbol} thinking...\");"},{"type":"DELETE","lineNumber":174,"oldContent":"            Thread.Sleep(1000);"},{"type":"DELETE","lineNumber":175,"oldContent":""},{"type":"DELETE","lineNumber":176,"oldContent":"            var bestMove = FindOptimalMove(board);"},{"type":"DELETE","lineNumber":177,"oldContent":"            Console.WriteLine($\"Player {Symbol} plays: {bestMove.Row} {bestMove.Col}\");"},{"type":"DELETE","lineNumber":178,"oldContent":"            Thread.Sleep(500);"},{"type":"DELETE","lineNumber":179,"oldContent":"            "},{"type":"DELETE","lineNumber":180,"oldContent":"            return bestMove;"},{"type":"DELETE","lineNumber":181,"oldContent":"        }"},{"type":"DELETE","lineNumber":182,"oldContent":""},{"type":"DELETE","lineNumber":183,"oldContent":"        private Move FindOptimalMove(Board board)"},{"type":"DELETE","lineNumber":184,"oldContent":"        {"},{"type":"DELETE","lineNumber":185,"oldContent":"            int bestScore = int.MinValue;"},{"type":"DELETE","lineNumber":186,"oldContent":"            var bestMove = new Move(-1, -1);"},{"type":"DELETE","lineNumber":187,"oldContent":""},{"type":"DELETE","lineNumber":188,"oldContent":"            for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":189,"oldContent":"            {"},{"type":"DELETE","lineNumber":190,"oldContent":"                for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":191,"oldContent":"                {"},{"type":"DELETE","lineNumber":192,"oldContent":"                    if (board.IsEmpty(i, j))"},{"type":"DELETE","lineNumber":193,"oldContent":"                    {"},{"type":"DELETE","lineNumber":194,"oldContent":"                        board.Set(i, j, Symbol);"},{"type":"DELETE","lineNumber":195,"oldContent":"                        int score = Minimax(board, 0, false);"},{"type":"DELETE","lineNumber":196,"oldContent":"                        board.Remove(i, j);"},{"type":"DELETE","lineNumber":197,"oldContent":""},{"type":"DELETE","lineNumber":198,"oldContent":"                        if (score > bestScore)"},{"type":"DELETE","lineNumber":199,"oldContent":"                        {"},{"type":"DELETE","lineNumber":200,"oldContent":"                            bestScore = score;"},{"type":"DELETE","lineNumber":201,"oldContent":"                            bestMove = new Move(i, j);"},{"type":"DELETE","lineNumber":202,"oldContent":"                        }"},{"type":"DELETE","lineNumber":203,"oldContent":"                    }"},{"type":"DELETE","lineNumber":204,"oldContent":"                }"},{"type":"DELETE","lineNumber":205,"oldContent":"            }"},{"type":"DELETE","lineNumber":206,"oldContent":""},{"type":"DELETE","lineNumber":207,"oldContent":"            return bestMove;"},{"type":"DELETE","lineNumber":208,"oldContent":"        }"},{"type":"DELETE","lineNumber":209,"oldContent":""},{"type":"DELETE","lineNumber":210,"oldContent":"        private int Minimax(Board board, int depth, bool maximizing)"},{"type":"DELETE","lineNumber":211,"oldContent":"        {"},{"type":"DELETE","lineNumber":212,"oldContent":"            if (board.HasWinner(out char winner))"},{"type":"DELETE","lineNumber":213,"oldContent":"            {"},{"type":"DELETE","lineNumber":214,"oldContent":"                if (winner == Symbol) return 10 - depth;"},{"type":"DELETE","lineNumber":215,"oldContent":"                if (winner == opponentSymbol) return depth - 10;"},{"type":"DELETE","lineNumber":216,"oldContent":"            }"},{"type":"DELETE","lineNumber":217,"oldContent":"            "},{"type":"DELETE","lineNumber":218,"oldContent":"            if (board.IsFull()) return 0;"},{"type":"DELETE","lineNumber":219,"oldContent":""},{"type":"DELETE","lineNumber":220,"oldContent":"            if (maximizing)"},{"type":"DELETE","lineNumber":221,"oldContent":"            {"},{"type":"DELETE","lineNumber":222,"oldContent":"                int maxEval = int.MinValue;"},{"type":"DELETE","lineNumber":223,"oldContent":"                for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":224,"oldContent":"                {"},{"type":"DELETE","lineNumber":225,"oldContent":"                    for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":226,"oldContent":"                    {"},{"type":"DELETE","lineNumber":227,"oldContent":"                        if (board.IsEmpty(i, j))"},{"type":"DELETE","lineNumber":228,"oldContent":"                        {"},{"type":"DELETE","lineNumber":229,"oldContent":"                            board.Set(i, j, Symbol);"},{"type":"DELETE","lineNumber":230,"oldContent":"                            int eval = Minimax(board, depth + 1, false);"},{"type":"DELETE","lineNumber":231,"oldContent":"                            board.Remove(i, j);"},{"type":"DELETE","lineNumber":232,"oldContent":"                            maxEval = Math.Max(maxEval, eval);"},{"type":"DELETE","lineNumber":233,"oldContent":"                        }"},{"type":"DELETE","lineNumber":234,"oldContent":"                    }"},{"type":"DELETE","lineNumber":235,"oldContent":"                }"},{"type":"DELETE","lineNumber":236,"oldContent":"                return maxEval;"},{"type":"DELETE","lineNumber":237,"oldContent":"            }"},{"type":"DELETE","lineNumber":238,"oldContent":"            else"},{"type":"DELETE","lineNumber":239,"oldContent":"            {"},{"type":"DELETE","lineNumber":240,"oldContent":"                int minEval = int.MaxValue;"},{"type":"DELETE","lineNumber":241,"oldContent":"                for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":242,"oldContent":"                {"},{"type":"DELETE","lineNumber":243,"oldContent":"                    for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":244,"oldContent":"                    {"},{"type":"DELETE","lineNumber":245,"oldContent":"                        if (board.IsEmpty(i, j))"},{"type":"DELETE","lineNumber":246,"oldContent":"                        {"},{"type":"DELETE","lineNumber":247,"oldContent":"                            board.Set(i, j, opponentSymbol);"},{"type":"DELETE","lineNumber":248,"oldContent":"                            int eval = Minimax(board, depth + 1, true);"},{"type":"DELETE","lineNumber":249,"oldContent":"                            board.Remove(i, j);"},{"type":"DELETE","lineNumber":250,"oldContent":"                            minEval = Math.Min(minEval, eval);"},{"type":"DELETE","lineNumber":251,"oldContent":"                        }"},{"type":"DELETE","lineNumber":252,"oldContent":"                    }"},{"type":"DELETE","lineNumber":253,"oldContent":"                }"},{"type":"DELETE","lineNumber":254,"oldContent":"                return minEval;"},{"type":"DELETE","lineNumber":255,"oldContent":"            }"},{"type":"DELETE","lineNumber":256,"oldContent":"        }"},{"type":"DELETE","lineNumber":257,"oldContent":"    }"},{"type":"DELETE","lineNumber":258,"oldContent":"}"},{"type":"DELETE","lineNumber":259,"oldContent":""},{"type":"DELETE","lineNumber":260,"oldContent":"// Game.cs"},{"type":"DELETE","lineNumber":261,"oldContent":"namespace TrisGame"},{"type":"DELETE","lineNumber":262,"oldContent":"{"},{"type":"DELETE","lineNumber":263,"oldContent":"    public class Game"},{"type":"DELETE","lineNumber":264,"oldContent":"    {"},{"type":"DELETE","lineNumber":265,"oldContent":"        private Board board;"},{"type":"DELETE","lineNumber":266,"oldContent":"        private IPlayer[] players;"},{"type":"DELETE","lineNumber":267,"oldContent":"        private int currentPlayerIndex;"},{"type":"DELETE","lineNumber":268,"oldContent":""},{"type":"DELETE","lineNumber":269,"oldContent":"        public Game()"},{"type":"DELETE","lineNumber":270,"oldContent":"        {"},{"type":"DELETE","lineNumber":271,"oldContent":"            board = new Board();"},{"type":"DELETE","lineNumber":272,"oldContent":"            players = new IPlayer[]"},{"type":"DELETE","lineNumber":273,"oldContent":"            {"},{"type":"DELETE","lineNumber":274,"oldContent":"                new Human('X'),"},{"type":"DELETE","lineNumber":275,"oldContent":"                new Computer('O')"},{"type":"DELETE","lineNumber":276,"oldContent":"            };"},{"type":"DELETE","lineNumber":277,"oldContent":"            currentPlayerIndex = 0;"},{"type":"DELETE","lineNumber":278,"oldContent":"        }"},{"type":"DELETE","lineNumber":279,"oldContent":""},{"type":"DELETE","lineNumber":280,"oldContent":"        public void Start()"},{"type":"DELETE","lineNumber":281,"oldContent":"        {"},{"type":"DELETE","lineNumber":282,"oldContent":"            Console.WriteLine(\"Tic Tac Toe\");"},{"type":"DELETE","lineNumber":283,"oldContent":"            Console.WriteLine(\"Human: X, Computer: O\\n\");"},{"type":"DELETE","lineNumber":284,"oldContent":""},{"type":"DELETE","lineNumber":285,"oldContent":"            while (true)"},{"type":"DELETE","lineNumber":286,"oldContent":"            {"},{"type":"DELETE","lineNumber":287,"oldContent":"                PlayRound();"},{"type":"DELETE","lineNumber":288,"oldContent":"                "},{"type":"DELETE","lineNumber":289,"oldContent":"                Console.Write(\"Play again? (y/n): \");"},{"type":"DELETE","lineNumber":290,"oldContent":"                if (Console.ReadLine()?.ToLower() != \"y\")"},{"type":"DELETE","lineNumber":291,"oldContent":"                    break;"},{"type":"DELETE","lineNumber":292,"oldContent":"                    "},{"type":"DELETE","lineNumber":293,"oldContent":"                Reset();"},{"type":"DELETE","lineNumber":294,"oldContent":"            }"},{"type":"DELETE","lineNumber":295,"oldContent":"        }"},{"type":"DELETE","lineNumber":296,"oldContent":""},{"type":"DELETE","lineNumber":297,"oldContent":"        private void PlayRound()"},{"type":"DELETE","lineNumber":298,"oldContent":"        {"},{"type":"DELETE","lineNumber":299,"oldContent":"            while (true)"},{"type":"DELETE","lineNumber":300,"oldContent":"            {"},{"type":"DELETE","lineNumber":301,"oldContent":"                Console.Clear();"},{"type":"DELETE","lineNumber":302,"oldContent":"                Console.WriteLine(\"Tic Tac Toe\\n\");"},{"type":"DELETE","lineNumber":303,"oldContent":"                board.Print();"},{"type":"DELETE","lineNumber":304,"oldContent":""},{"type":"DELETE","lineNumber":305,"oldContent":"                var currentPlayer = players[currentPlayerIndex];"},{"type":"DELETE","lineNumber":306,"oldContent":"                var move = currentPlayer.GetNextMove(board);"},{"type":"DELETE","lineNumber":307,"oldContent":"                board.Set(move.Row, move.Col, currentPlayer.Symbol);"},{"type":"DELETE","lineNumber":308,"oldContent":""},{"type":"DELETE","lineNumber":309,"oldContent":"                if (board.HasWinner(out char winner))"},{"type":"DELETE","lineNumber":310,"oldContent":"                {"},{"type":"DELETE","lineNumber":311,"oldContent":"                    Console.Clear();"},{"type":"DELETE","lineNumber":312,"oldContent":"                    Console.WriteLine(\"Tic Tac Toe\\n\");"},{"type":"DELETE","lineNumber":313,"oldContent":"                    board.Print();"},{"type":"DELETE","lineNumber":314,"oldContent":"                    Console.WriteLine($\"Player {winner} wins!\");"},{"type":"DELETE","lineNumber":315,"oldContent":"                    break;"},{"type":"DELETE","lineNumber":316,"oldContent":"                }"},{"type":"DELETE","lineNumber":317,"oldContent":""},{"type":"DELETE","lineNumber":318,"oldContent":"                if (board.IsFull())"},{"type":"DELETE","lineNumber":319,"oldContent":"                {"},{"type":"DELETE","lineNumber":320,"oldContent":"                    Console.Clear();"},{"type":"DELETE","lineNumber":321,"oldContent":"                    Console.WriteLine(\"Tic Tac Toe\\n\");"},{"type":"DELETE","lineNumber":322,"oldContent":"                    board.Print();"},{"type":"DELETE","lineNumber":323,"oldContent":"                    Console.WriteLine(\"It's a tie!\");"},{"type":"DELETE","lineNumber":324,"oldContent":"                    break;"},{"type":"DELETE","lineNumber":325,"oldContent":"                }"},{"type":"DELETE","lineNumber":326,"oldContent":""},{"type":"DELETE","lineNumber":327,"oldContent":"                currentPlayerIndex = 1 - currentPlayerIndex;"},{"type":"DELETE","lineNumber":328,"oldContent":"            }"},{"type":"DELETE","lineNumber":329,"oldContent":"        }"},{"type":"DELETE","lineNumber":330,"oldContent":""},{"type":"DELETE","lineNumber":331,"oldContent":"        private void Reset()"},{"type":"DELETE","lineNumber":332,"oldContent":"        {"},{"type":"DELETE","lineNumber":333,"oldContent":"            board.Clear();"},{"type":"DELETE","lineNumber":334,"oldContent":"            currentPlayerIndex = 0;"},{"type":"DELETE","lineNumber":335,"oldContent":"        }"},{"type":"DELETE","lineNumber":336,"oldContent":"    }"},{"type":"DELETE","lineNumber":337,"oldContent":"}"},{"type":"DELETE","lineNumber":338,"oldContent":""},{"type":"DELETE","lineNumber":339,"oldContent":"// Program.cs"},{"type":"DELETE","lineNumber":340,"oldContent":"namespace TrisGame"},{"type":"DELETE","lineNumber":341,"oldContent":"{"},{"type":"DELETE","lineNumber":342,"oldContent":"    class Program"},{"type":"DELETE","lineNumber":343,"oldContent":"    {"},{"type":"DELETE","lineNumber":344,"oldContent":"        static void Main(string[] args)"},{"type":"DELETE","lineNumber":345,"oldContent":"        {"},{"type":"DELETE","lineNumber":346,"oldContent":"            var game = new Game();"},{"type":"DELETE","lineNumber":347,"oldContent":"            game.Start();"},{"type":"DELETE","lineNumber":348,"oldContent":"        }"},{"type":"DELETE","lineNumber":349,"oldContent":"    }"}]},{"timestamp":1756986166306,"changes":[{"type":"DELETE","lineNumber":0,"oldContent":"// Board.cs"},{"type":"DELETE","lineNumber":3,"oldContent":"    public class Board"},{"type":"DELETE","lineNumber":4,"oldContent":"    {"},{"type":"DELETE","lineNumber":5,"oldContent":"        private char[,] cells = new char[3, 3];"},{"type":"DELETE","lineNumber":6,"oldContent":""},{"type":"DELETE","lineNumber":7,"oldContent":"        public Board()"},{"type":"DELETE","lineNumber":8,"oldContent":"        {"},{"type":"DELETE","lineNumber":9,"oldContent":"            Clear();"},{"type":"DELETE","lineNumber":10,"oldContent":"        }"},{"type":"DELETE","lineNumber":11,"oldContent":""},{"type":"DELETE","lineNumber":12,"oldContent":"        public void Clear()"},{"type":"DELETE","lineNumber":13,"oldContent":"        {"},{"type":"DELETE","lineNumber":14,"oldContent":"            for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":15,"oldContent":"                for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":16,"oldContent":"                    cells[i, j] = ' ';"},{"type":"DELETE","lineNumber":17,"oldContent":"        }"},{"type":"DELETE","lineNumber":18,"oldContent":""},{"type":"DELETE","lineNumber":19,"oldContent":"        public bool IsEmpty(int row, int col)"},{"type":"DELETE","lineNumber":20,"oldContent":"        {"},{"type":"DELETE","lineNumber":21,"oldContent":"            return row >= 0 && row < 3 && col >= 0 && col < 3 && cells[row, col] == ' ';"},{"type":"DELETE","lineNumber":22,"oldContent":"        }"},{"type":"DELETE","lineNumber":23,"oldContent":""},{"type":"DELETE","lineNumber":24,"oldContent":"        public void Set(int row, int col, char symbol)"},{"type":"DELETE","lineNumber":25,"oldContent":"        {"},{"type":"DELETE","lineNumber":26,"oldContent":"            if (IsEmpty(row, col))"},{"type":"DELETE","lineNumber":27,"oldContent":"                cells[row, col] = symbol;"},{"type":"DELETE","lineNumber":28,"oldContent":"        }"},{"type":"DELETE","lineNumber":29,"oldContent":""},{"type":"DELETE","lineNumber":30,"oldContent":"        public void Remove(int row, int col)"},{"type":"DELETE","lineNumber":31,"oldContent":"        {"},{"type":"DELETE","lineNumber":32,"oldContent":"            cells[row, col] = ' ';"},{"type":"DELETE","lineNumber":33,"oldContent":"        }"},{"type":"DELETE","lineNumber":34,"oldContent":""},{"type":"DELETE","lineNumber":35,"oldContent":"        public char Get(int row, int col)"},{"type":"DELETE","lineNumber":36,"oldContent":"        {"},{"type":"DELETE","lineNumber":37,"oldContent":"            return cells[row, col];"},{"type":"DELETE","lineNumber":38,"oldContent":"        }"},{"type":"DELETE","lineNumber":39,"oldContent":""},{"type":"DELETE","lineNumber":40,"oldContent":"        public bool HasWinner(out char winner)"},{"type":"DELETE","lineNumber":41,"oldContent":"        {"},{"type":"DELETE","lineNumber":42,"oldContent":"            winner = ' ';"},{"type":"DELETE","lineNumber":43,"oldContent":""},{"type":"DELETE","lineNumber":44,"oldContent":"            // Check rows and columns"},{"type":"DELETE","lineNumber":45,"oldContent":"            for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":46,"oldContent":"            {"},{"type":"DELETE","lineNumber":47,"oldContent":"                if (cells[i, 0] != ' ' && cells[i, 0] == cells[i, 1] && cells[i, 1] == cells[i, 2])"},{"type":"DELETE","lineNumber":48,"oldContent":"                {"},{"type":"DELETE","lineNumber":49,"oldContent":"                    winner = cells[i, 0];"},{"type":"DELETE","lineNumber":50,"oldContent":"                    return true;"},{"type":"DELETE","lineNumber":51,"oldContent":"                }"},{"type":"DELETE","lineNumber":52,"oldContent":"                if (cells[0, i] != ' ' && cells[0, i] == cells[1, i] && cells[1, i] == cells[2, i])"},{"type":"DELETE","lineNumber":53,"oldContent":"                {"},{"type":"DELETE","lineNumber":54,"oldContent":"                    winner = cells[0, i];"},{"type":"DELETE","lineNumber":55,"oldContent":"                    return true;"},{"type":"DELETE","lineNumber":56,"oldContent":"                }"},{"type":"DELETE","lineNumber":57,"oldContent":"            }"},{"type":"DELETE","lineNumber":58,"oldContent":""},{"type":"DELETE","lineNumber":59,"oldContent":"            // Check diagonals"},{"type":"DELETE","lineNumber":60,"oldContent":"            if (cells[0, 0] != ' ' && cells[0, 0] == cells[1, 1] && cells[1, 1] == cells[2, 2])"},{"type":"DELETE","lineNumber":61,"oldContent":"            {"},{"type":"DELETE","lineNumber":62,"oldContent":"                winner = cells[0, 0];"},{"type":"DELETE","lineNumber":63,"oldContent":"                return true;"},{"type":"DELETE","lineNumber":64,"oldContent":"            }"},{"type":"DELETE","lineNumber":65,"oldContent":"            if (cells[0, 2] != ' ' && cells[0, 2] == cells[1, 1] && cells[1, 1] == cells[2, 0])"},{"type":"DELETE","lineNumber":66,"oldContent":"            {"},{"type":"DELETE","lineNumber":67,"oldContent":"                winner = cells[0, 2];"},{"type":"DELETE","lineNumber":68,"oldContent":"                return true;"},{"type":"DELETE","lineNumber":69,"oldContent":"            }"},{"type":"DELETE","lineNumber":70,"oldContent":""},{"type":"DELETE","lineNumber":71,"oldContent":"            return false;"},{"type":"DELETE","lineNumber":72,"oldContent":"        }"},{"type":"DELETE","lineNumber":73,"oldContent":""},{"type":"DELETE","lineNumber":74,"oldContent":"        public bool IsFull()"},{"type":"DELETE","lineNumber":75,"oldContent":"        {"},{"type":"DELETE","lineNumber":76,"oldContent":"            for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":77,"oldContent":"                for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":78,"oldContent":"                    if (cells[i, j] == ' ')"},{"type":"DELETE","lineNumber":79,"oldContent":"                        return false;"},{"type":"DELETE","lineNumber":80,"oldContent":"            return true;"},{"type":"DELETE","lineNumber":81,"oldContent":"        }"},{"type":"DELETE","lineNumber":82,"oldContent":""},{"type":"DELETE","lineNumber":83,"oldContent":"        public void Print()"},{"type":"DELETE","lineNumber":84,"oldContent":"        {"},{"type":"DELETE","lineNumber":85,"oldContent":"            Console.WriteLine();"},{"type":"DELETE","lineNumber":86,"oldContent":"            for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":87,"oldContent":"            {"},{"type":"DELETE","lineNumber":88,"oldContent":"                Console.Write(\" \");"},{"type":"DELETE","lineNumber":89,"oldContent":"                for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":90,"oldContent":"                {"},{"type":"DELETE","lineNumber":91,"oldContent":"                    Console.Write(cells[i, j]);"},{"type":"DELETE","lineNumber":92,"oldContent":"                    if (j < 2) Console.Write(\" | \");"},{"type":"DELETE","lineNumber":93,"oldContent":"                }"},{"type":"DELETE","lineNumber":94,"oldContent":"                Console.WriteLine();"},{"type":"DELETE","lineNumber":95,"oldContent":"                if (i < 2) Console.WriteLine(\"---|---|---\");"},{"type":"DELETE","lineNumber":96,"oldContent":"            }"},{"type":"DELETE","lineNumber":97,"oldContent":"            Console.WriteLine();"},{"type":"DELETE","lineNumber":98,"oldContent":"        }"},{"type":"DELETE","lineNumber":99,"oldContent":"    }"},{"type":"DELETE","lineNumber":100,"oldContent":"}"},{"type":"DELETE","lineNumber":101,"oldContent":""},{"type":"DELETE","lineNumber":102,"oldContent":"// Move.cs"},{"type":"DELETE","lineNumber":103,"oldContent":"namespace TrisGame"},{"type":"DELETE","lineNumber":104,"oldContent":"{"},{"type":"DELETE","lineNumber":105,"oldContent":"    public struct Move"},{"type":"DELETE","lineNumber":106,"oldContent":"    {"},{"type":"DELETE","lineNumber":107,"oldContent":"        public int Row { get; set; }"},{"type":"DELETE","lineNumber":108,"oldContent":"        public int Col { get; set; }"},{"type":"DELETE","lineNumber":109,"oldContent":""},{"type":"DELETE","lineNumber":110,"oldContent":"        public Move(int row, int col)"},{"type":"DELETE","lineNumber":111,"oldContent":"        {"},{"type":"DELETE","lineNumber":112,"oldContent":"            Row = row;"},{"type":"DELETE","lineNumber":113,"oldContent":"            Col = col;"},{"type":"DELETE","lineNumber":114,"oldContent":"        }"},{"type":"DELETE","lineNumber":115,"oldContent":"    }"},{"type":"DELETE","lineNumber":116,"oldContent":""},{"type":"DELETE","lineNumber":117,"oldContent":"    public interface IPlayer"},{"type":"DELETE","lineNumber":118,"oldContent":"    {"},{"type":"DELETE","lineNumber":119,"oldContent":"        char Symbol { get; }"},{"type":"DELETE","lineNumber":120,"oldContent":"        Move GetNextMove(Board board);"},{"type":"DELETE","lineNumber":121,"oldContent":"    }"},{"type":"DELETE","lineNumber":122,"oldContent":"}"},{"type":"DELETE","lineNumber":123,"oldContent":""},{"type":"DELETE","lineNumber":124,"oldContent":"// Human.cs"},{"type":"DELETE","lineNumber":125,"oldContent":"namespace TrisGame"},{"type":"DELETE","lineNumber":126,"oldContent":"{"}]},{"timestamp":1756986442139,"changes":[{"type":"DELETE","lineNumber":31,"oldContent":""}]}]},"C:/Users/tagli/RiderProjects/TrisGame/TrisGame/Computer.cs":{"filePath":"C:/Users/tagli/RiderProjects/TrisGame/TrisGame/Computer.cs","baseContent":"// Board.cs\nnamespace TrisGame\n{\n    public class Board\n    {\n        private char[,] cells = new char[3, 3];\n\n        public Board()\n        {\n            Clear();\n        }\n\n        public void Clear()\n        {\n            for (int i = 0; i < 3; i++)\n                for (int j = 0; j < 3; j++)\n                    cells[i, j] = ' ';\n        }\n\n        public bool IsEmpty(int row, int col)\n        {\n            return row >= 0 && row < 3 && col >= 0 && col < 3 && cells[row, col] == ' ';\n        }\n\n        public void Set(int row, int col, char symbol)\n        {\n            if (IsEmpty(row, col))\n                cells[row, col] = symbol;\n        }\n\n        public void Remove(int row, int col)\n        {\n            cells[row, col] = ' ';\n        }\n\n        public char Get(int row, int col)\n        {\n            return cells[row, col];\n        }\n\n        public bool HasWinner(out char winner)\n        {\n            winner = ' ';\n\n            // Check rows and columns\n            for (int i = 0; i < 3; i++)\n            {\n                if (cells[i, 0] != ' ' && cells[i, 0] == cells[i, 1] && cells[i, 1] == cells[i, 2])\n                {\n                    winner = cells[i, 0];\n                    return true;\n                }\n                if (cells[0, i] != ' ' && cells[0, i] == cells[1, i] && cells[1, i] == cells[2, i])\n                {\n                    winner = cells[0, i];\n                    return true;\n                }\n            }\n\n            // Check diagonals\n            if (cells[0, 0] != ' ' && cells[0, 0] == cells[1, 1] && cells[1, 1] == cells[2, 2])\n            {\n                winner = cells[0, 0];\n                return true;\n            }\n            if (cells[0, 2] != ' ' && cells[0, 2] == cells[1, 1] && cells[1, 1] == cells[2, 0])\n            {\n                winner = cells[0, 2];\n                return true;\n            }\n\n            return false;\n        }\n\n        public bool IsFull()\n        {\n            for (int i = 0; i < 3; i++)\n                for (int j = 0; j < 3; j++)\n                    if (cells[i, j] == ' ')\n                        return false;\n            return true;\n        }\n\n        public void Print()\n        {\n            Console.WriteLine();\n            for (int i = 0; i < 3; i++)\n            {\n                Console.Write(\" \");\n                for (int j = 0; j < 3; j++)\n                {\n                    Console.Write(cells[i, j]);\n                    if (j < 2) Console.Write(\" | \");\n                }\n                Console.WriteLine();\n                if (i < 2) Console.WriteLine(\"---|---|---\");\n            }\n            Console.WriteLine();\n        }\n    }\n}\n\n// Move.cs\nnamespace TrisGame\n{\n    public struct Move\n    {\n        public int Row { get; set; }\n        public int Col { get; set; }\n\n        public Move(int row, int col)\n        {\n            Row = row;\n            Col = col;\n        }\n    }\n\n    public interface IPlayer\n    {\n        char Symbol { get; }\n        Move GetNextMove(Board board);\n    }\n}\n\n// Human.cs\nnamespace TrisGame\n{\n    public class Human : IPlayer\n    {\n        public char Symbol { get; private set; }\n\n        public Human(char symbol)\n        {\n            Symbol = symbol;\n        }\n\n        public Move GetNextMove(Board board)\n        {\n            while (true)\n            {\n                Console.Write($\"Player {Symbol} - enter row and column (0-2): \");\n                var input = Console.ReadLine()?.Split();\n                \n                if (input?.Length == 2 && \n                    int.TryParse(input[0], out int row) && \n                    int.TryParse(input[1], out int col) &&\n                    board.IsEmpty(row, col))\n                {\n                    return new Move(row, col);\n                }\n                \n                Console.WriteLine(\"Invalid move, try again.\");\n            }\n        }\n    }\n}\n\n// Computer.cs\nnamespace TrisGame\n{\n    public class Computer : IPlayer\n    {\n        public char Symbol { get; private set; }\n        private char opponentSymbol;\n\n        public Computer(char symbol)\n        {\n            Symbol = symbol;\n            opponentSymbol = symbol == 'X' ? 'O' : 'X';\n        }\n\n        public Move GetNextMove(Board board)\n        {\n            Console.WriteLine($\"Player {Symbol} thinking...\");\n            Thread.Sleep(1000);\n\n            var bestMove = FindOptimalMove(board);\n            Console.WriteLine($\"Player {Symbol} plays: {bestMove.Row} {bestMove.Col}\");\n            Thread.Sleep(500);\n            \n            return bestMove;\n        }\n\n        private Move FindOptimalMove(Board board)\n        {\n            int bestScore = int.MinValue;\n            var bestMove = new Move(-1, -1);\n\n            for (int i = 0; i < 3; i++)\n            {\n                for (int j = 0; j < 3; j++)\n                {\n                    if (board.IsEmpty(i, j))\n                    {\n                        board.Set(i, j, Symbol);\n                        int score = Minimax(board, 0, false);\n                        board.Remove(i, j);\n\n                        if (score > bestScore)\n                        {\n                            bestScore = score;\n                            bestMove = new Move(i, j);\n                        }\n                    }\n                }\n            }\n\n            return bestMove;\n        }\n\n        private int Minimax(Board board, int depth, bool maximizing)\n        {\n            if (board.HasWinner(out char winner))\n            {\n                if (winner == Symbol) return 10 - depth;\n                if (winner == opponentSymbol) return depth - 10;\n            }\n            \n            if (board.IsFull()) return 0;\n\n            if (maximizing)\n            {\n                int maxEval = int.MinValue;\n                for (int i = 0; i < 3; i++)\n                {\n                    for (int j = 0; j < 3; j++)\n                    {\n                        if (board.IsEmpty(i, j))\n                        {\n                            board.Set(i, j, Symbol);\n                            int eval = Minimax(board, depth + 1, false);\n                            board.Remove(i, j);\n                            maxEval = Math.Max(maxEval, eval);\n                        }\n                    }\n                }\n                return maxEval;\n            }\n            else\n            {\n                int minEval = int.MaxValue;\n                for (int i = 0; i < 3; i++)\n                {\n                    for (int j = 0; j < 3; j++)\n                    {\n                        if (board.IsEmpty(i, j))\n                        {\n                            board.Set(i, j, opponentSymbol);\n                            int eval = Minimax(board, depth + 1, true);\n                            board.Remove(i, j);\n                            minEval = Math.Min(minEval, eval);\n                        }\n                    }\n                }\n                return minEval;\n            }\n        }\n    }\n}\n\n// Game.cs\nnamespace TrisGame\n{\n    public class Game\n    {\n        private Board board;\n        private IPlayer[] players;\n        private int currentPlayerIndex;\n\n        public Game()\n        {\n            board = new Board();\n            players = new IPlayer[]\n            {\n                new Human('X'),\n                new Computer('O')\n            };\n            currentPlayerIndex = 0;\n        }\n\n        public void Start()\n        {\n            Console.WriteLine(\"Tic Tac Toe\");\n            Console.WriteLine(\"Human: X, Computer: O\\n\");\n\n            while (true)\n            {\n                PlayRound();\n                \n                Console.Write(\"Play again? (y/n): \");\n                if (Console.ReadLine()?.ToLower() != \"y\")\n                    break;\n                    \n                Reset();\n            }\n        }\n\n        private void PlayRound()\n        {\n            while (true)\n            {\n                Console.Clear();\n                Console.WriteLine(\"Tic Tac Toe\\n\");\n                board.Print();\n\n                var currentPlayer = players[currentPlayerIndex];\n                var move = currentPlayer.GetNextMove(board);\n                board.Set(move.Row, move.Col, currentPlayer.Symbol);\n\n                if (board.HasWinner(out char winner))\n                {\n                    Console.Clear();\n                    Console.WriteLine(\"Tic Tac Toe\\n\");\n                    board.Print();\n                    Console.WriteLine($\"Player {winner} wins!\");\n                    break;\n                }\n\n                if (board.IsFull())\n                {\n                    Console.Clear();\n                    Console.WriteLine(\"Tic Tac Toe\\n\");\n                    board.Print();\n                    Console.WriteLine(\"It's a tie!\");\n                    break;\n                }\n\n                currentPlayerIndex = 1 - currentPlayerIndex;\n            }\n        }\n\n        private void Reset()\n        {\n            board.Clear();\n            currentPlayerIndex = 0;\n        }\n    }\n}\n\n// Program.cs\nnamespace TrisGame\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var game = new Game();\n            game.Start();\n        }\n    }","baseTimestamp":1756986173486,"deltas":[{"timestamp":1756986179322,"changes":[{"type":"DELETE","lineNumber":259,"oldContent":""},{"type":"DELETE","lineNumber":260,"oldContent":"// Game.cs"},{"type":"DELETE","lineNumber":261,"oldContent":"namespace TrisGame"},{"type":"DELETE","lineNumber":262,"oldContent":"{"},{"type":"DELETE","lineNumber":263,"oldContent":"    public class Game"},{"type":"DELETE","lineNumber":264,"oldContent":"    {"},{"type":"DELETE","lineNumber":265,"oldContent":"        private Board board;"},{"type":"DELETE","lineNumber":266,"oldContent":"        private IPlayer[] players;"},{"type":"DELETE","lineNumber":267,"oldContent":"        private int currentPlayerIndex;"},{"type":"DELETE","lineNumber":268,"oldContent":""},{"type":"DELETE","lineNumber":269,"oldContent":"        public Game()"},{"type":"DELETE","lineNumber":270,"oldContent":"        {"},{"type":"DELETE","lineNumber":271,"oldContent":"            board = new Board();"},{"type":"DELETE","lineNumber":272,"oldContent":"            players = new IPlayer[]"},{"type":"DELETE","lineNumber":273,"oldContent":"            {"},{"type":"DELETE","lineNumber":274,"oldContent":"                new Human('X'),"},{"type":"DELETE","lineNumber":275,"oldContent":"                new Computer('O')"},{"type":"DELETE","lineNumber":276,"oldContent":"            };"},{"type":"DELETE","lineNumber":277,"oldContent":"            currentPlayerIndex = 0;"},{"type":"DELETE","lineNumber":278,"oldContent":"        }"},{"type":"DELETE","lineNumber":279,"oldContent":""},{"type":"DELETE","lineNumber":280,"oldContent":"        public void Start()"},{"type":"DELETE","lineNumber":281,"oldContent":"        {"},{"type":"DELETE","lineNumber":282,"oldContent":"            Console.WriteLine(\"Tic Tac Toe\");"},{"type":"DELETE","lineNumber":283,"oldContent":"            Console.WriteLine(\"Human: X, Computer: O\\n\");"},{"type":"DELETE","lineNumber":284,"oldContent":""},{"type":"DELETE","lineNumber":285,"oldContent":"            while (true)"},{"type":"DELETE","lineNumber":286,"oldContent":"            {"},{"type":"DELETE","lineNumber":287,"oldContent":"                PlayRound();"},{"type":"DELETE","lineNumber":288,"oldContent":"                "},{"type":"DELETE","lineNumber":289,"oldContent":"                Console.Write(\"Play again? (y/n): \");"},{"type":"DELETE","lineNumber":290,"oldContent":"                if (Console.ReadLine()?.ToLower() != \"y\")"},{"type":"DELETE","lineNumber":291,"oldContent":"                    break;"},{"type":"DELETE","lineNumber":292,"oldContent":"                    "},{"type":"DELETE","lineNumber":293,"oldContent":"                Reset();"},{"type":"DELETE","lineNumber":294,"oldContent":"            }"},{"type":"DELETE","lineNumber":295,"oldContent":"        }"},{"type":"DELETE","lineNumber":296,"oldContent":""},{"type":"DELETE","lineNumber":297,"oldContent":"        private void PlayRound()"},{"type":"DELETE","lineNumber":298,"oldContent":"        {"},{"type":"DELETE","lineNumber":299,"oldContent":"            while (true)"},{"type":"DELETE","lineNumber":300,"oldContent":"            {"},{"type":"DELETE","lineNumber":301,"oldContent":"                Console.Clear();"},{"type":"DELETE","lineNumber":302,"oldContent":"                Console.WriteLine(\"Tic Tac Toe\\n\");"},{"type":"DELETE","lineNumber":303,"oldContent":"                board.Print();"},{"type":"DELETE","lineNumber":304,"oldContent":""},{"type":"DELETE","lineNumber":305,"oldContent":"                var currentPlayer = players[currentPlayerIndex];"},{"type":"DELETE","lineNumber":306,"oldContent":"                var move = currentPlayer.GetNextMove(board);"},{"type":"DELETE","lineNumber":307,"oldContent":"                board.Set(move.Row, move.Col, currentPlayer.Symbol);"},{"type":"DELETE","lineNumber":308,"oldContent":""},{"type":"DELETE","lineNumber":309,"oldContent":"                if (board.HasWinner(out char winner))"},{"type":"DELETE","lineNumber":310,"oldContent":"                {"},{"type":"DELETE","lineNumber":311,"oldContent":"                    Console.Clear();"},{"type":"DELETE","lineNumber":312,"oldContent":"                    Console.WriteLine(\"Tic Tac Toe\\n\");"},{"type":"DELETE","lineNumber":313,"oldContent":"                    board.Print();"},{"type":"DELETE","lineNumber":314,"oldContent":"                    Console.WriteLine($\"Player {winner} wins!\");"},{"type":"DELETE","lineNumber":315,"oldContent":"                    break;"},{"type":"DELETE","lineNumber":316,"oldContent":"                }"},{"type":"DELETE","lineNumber":317,"oldContent":""},{"type":"DELETE","lineNumber":318,"oldContent":"                if (board.IsFull())"},{"type":"DELETE","lineNumber":319,"oldContent":"                {"},{"type":"DELETE","lineNumber":320,"oldContent":"                    Console.Clear();"},{"type":"DELETE","lineNumber":321,"oldContent":"                    Console.WriteLine(\"Tic Tac Toe\\n\");"},{"type":"DELETE","lineNumber":322,"oldContent":"                    board.Print();"},{"type":"DELETE","lineNumber":323,"oldContent":"                    Console.WriteLine(\"It's a tie!\");"},{"type":"DELETE","lineNumber":324,"oldContent":"                    break;"},{"type":"DELETE","lineNumber":325,"oldContent":"                }"},{"type":"DELETE","lineNumber":326,"oldContent":""},{"type":"DELETE","lineNumber":327,"oldContent":"                currentPlayerIndex = 1 - currentPlayerIndex;"},{"type":"DELETE","lineNumber":328,"oldContent":"            }"},{"type":"DELETE","lineNumber":329,"oldContent":"        }"},{"type":"DELETE","lineNumber":330,"oldContent":""},{"type":"DELETE","lineNumber":331,"oldContent":"        private void Reset()"},{"type":"DELETE","lineNumber":332,"oldContent":"        {"},{"type":"DELETE","lineNumber":333,"oldContent":"            board.Clear();"},{"type":"DELETE","lineNumber":334,"oldContent":"            currentPlayerIndex = 0;"},{"type":"DELETE","lineNumber":335,"oldContent":"        }"},{"type":"DELETE","lineNumber":336,"oldContent":"    }"},{"type":"DELETE","lineNumber":337,"oldContent":"}"},{"type":"DELETE","lineNumber":338,"oldContent":""},{"type":"DELETE","lineNumber":339,"oldContent":"// Program.cs"},{"type":"DELETE","lineNumber":340,"oldContent":"namespace TrisGame"},{"type":"DELETE","lineNumber":341,"oldContent":"{"},{"type":"DELETE","lineNumber":342,"oldContent":"    class Program"},{"type":"DELETE","lineNumber":343,"oldContent":"    {"},{"type":"DELETE","lineNumber":344,"oldContent":"        static void Main(string[] args)"},{"type":"DELETE","lineNumber":345,"oldContent":"        {"},{"type":"DELETE","lineNumber":346,"oldContent":"            var game = new Game();"},{"type":"DELETE","lineNumber":347,"oldContent":"            game.Start();"},{"type":"DELETE","lineNumber":348,"oldContent":"        }"},{"type":"DELETE","lineNumber":349,"oldContent":"    }"}]},{"timestamp":1756986186916,"changes":[{"type":"DELETE","lineNumber":0,"oldContent":"// Board.cs"},{"type":"DELETE","lineNumber":3,"oldContent":"    public class Board"},{"type":"DELETE","lineNumber":4,"oldContent":"    {"},{"type":"DELETE","lineNumber":5,"oldContent":"        private char[,] cells = new char[3, 3];"},{"type":"DELETE","lineNumber":6,"oldContent":""},{"type":"DELETE","lineNumber":7,"oldContent":"        public Board()"},{"type":"DELETE","lineNumber":8,"oldContent":"        {"},{"type":"DELETE","lineNumber":9,"oldContent":"            Clear();"},{"type":"DELETE","lineNumber":10,"oldContent":"        }"},{"type":"DELETE","lineNumber":11,"oldContent":""},{"type":"DELETE","lineNumber":12,"oldContent":"        public void Clear()"},{"type":"DELETE","lineNumber":13,"oldContent":"        {"},{"type":"DELETE","lineNumber":14,"oldContent":"            for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":15,"oldContent":"                for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":16,"oldContent":"                    cells[i, j] = ' ';"},{"type":"DELETE","lineNumber":17,"oldContent":"        }"},{"type":"DELETE","lineNumber":18,"oldContent":""},{"type":"DELETE","lineNumber":19,"oldContent":"        public bool IsEmpty(int row, int col)"},{"type":"DELETE","lineNumber":20,"oldContent":"        {"},{"type":"DELETE","lineNumber":21,"oldContent":"            return row >= 0 && row < 3 && col >= 0 && col < 3 && cells[row, col] == ' ';"},{"type":"DELETE","lineNumber":22,"oldContent":"        }"},{"type":"DELETE","lineNumber":23,"oldContent":""},{"type":"DELETE","lineNumber":24,"oldContent":"        public void Set(int row, int col, char symbol)"},{"type":"DELETE","lineNumber":25,"oldContent":"        {"},{"type":"DELETE","lineNumber":26,"oldContent":"            if (IsEmpty(row, col))"},{"type":"DELETE","lineNumber":27,"oldContent":"                cells[row, col] = symbol;"},{"type":"DELETE","lineNumber":28,"oldContent":"        }"},{"type":"DELETE","lineNumber":29,"oldContent":""},{"type":"DELETE","lineNumber":30,"oldContent":"        public void Remove(int row, int col)"},{"type":"DELETE","lineNumber":31,"oldContent":"        {"},{"type":"DELETE","lineNumber":32,"oldContent":"            cells[row, col] = ' ';"},{"type":"DELETE","lineNumber":33,"oldContent":"        }"},{"type":"DELETE","lineNumber":34,"oldContent":""},{"type":"DELETE","lineNumber":35,"oldContent":"        public char Get(int row, int col)"},{"type":"DELETE","lineNumber":36,"oldContent":"        {"},{"type":"DELETE","lineNumber":37,"oldContent":"            return cells[row, col];"},{"type":"DELETE","lineNumber":38,"oldContent":"        }"},{"type":"DELETE","lineNumber":39,"oldContent":""},{"type":"DELETE","lineNumber":40,"oldContent":"        public bool HasWinner(out char winner)"},{"type":"DELETE","lineNumber":41,"oldContent":"        {"},{"type":"DELETE","lineNumber":42,"oldContent":"            winner = ' ';"},{"type":"DELETE","lineNumber":43,"oldContent":""},{"type":"DELETE","lineNumber":44,"oldContent":"            // Check rows and columns"},{"type":"DELETE","lineNumber":45,"oldContent":"            for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":46,"oldContent":"            {"},{"type":"DELETE","lineNumber":47,"oldContent":"                if (cells[i, 0] != ' ' && cells[i, 0] == cells[i, 1] && cells[i, 1] == cells[i, 2])"},{"type":"DELETE","lineNumber":48,"oldContent":"                {"},{"type":"DELETE","lineNumber":49,"oldContent":"                    winner = cells[i, 0];"},{"type":"DELETE","lineNumber":50,"oldContent":"                    return true;"},{"type":"DELETE","lineNumber":51,"oldContent":"                }"},{"type":"DELETE","lineNumber":52,"oldContent":"                if (cells[0, i] != ' ' && cells[0, i] == cells[1, i] && cells[1, i] == cells[2, i])"},{"type":"DELETE","lineNumber":53,"oldContent":"                {"},{"type":"DELETE","lineNumber":54,"oldContent":"                    winner = cells[0, i];"},{"type":"DELETE","lineNumber":55,"oldContent":"                    return true;"},{"type":"DELETE","lineNumber":56,"oldContent":"                }"},{"type":"DELETE","lineNumber":57,"oldContent":"            }"},{"type":"DELETE","lineNumber":58,"oldContent":""},{"type":"DELETE","lineNumber":59,"oldContent":"            // Check diagonals"},{"type":"DELETE","lineNumber":60,"oldContent":"            if (cells[0, 0] != ' ' && cells[0, 0] == cells[1, 1] && cells[1, 1] == cells[2, 2])"},{"type":"DELETE","lineNumber":61,"oldContent":"            {"},{"type":"DELETE","lineNumber":62,"oldContent":"                winner = cells[0, 0];"},{"type":"DELETE","lineNumber":63,"oldContent":"                return true;"},{"type":"DELETE","lineNumber":64,"oldContent":"            }"},{"type":"DELETE","lineNumber":65,"oldContent":"            if (cells[0, 2] != ' ' && cells[0, 2] == cells[1, 1] && cells[1, 1] == cells[2, 0])"},{"type":"DELETE","lineNumber":66,"oldContent":"            {"},{"type":"DELETE","lineNumber":67,"oldContent":"                winner = cells[0, 2];"},{"type":"DELETE","lineNumber":68,"oldContent":"                return true;"},{"type":"DELETE","lineNumber":69,"oldContent":"            }"},{"type":"DELETE","lineNumber":70,"oldContent":""},{"type":"DELETE","lineNumber":71,"oldContent":"            return false;"},{"type":"DELETE","lineNumber":72,"oldContent":"        }"},{"type":"DELETE","lineNumber":73,"oldContent":""},{"type":"DELETE","lineNumber":74,"oldContent":"        public bool IsFull()"},{"type":"DELETE","lineNumber":75,"oldContent":"        {"},{"type":"DELETE","lineNumber":76,"oldContent":"            for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":77,"oldContent":"                for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":78,"oldContent":"                    if (cells[i, j] == ' ')"},{"type":"DELETE","lineNumber":79,"oldContent":"                        return false;"},{"type":"DELETE","lineNumber":80,"oldContent":"            return true;"},{"type":"DELETE","lineNumber":81,"oldContent":"        }"},{"type":"DELETE","lineNumber":82,"oldContent":""},{"type":"DELETE","lineNumber":83,"oldContent":"        public void Print()"},{"type":"DELETE","lineNumber":84,"oldContent":"        {"},{"type":"DELETE","lineNumber":85,"oldContent":"            Console.WriteLine();"},{"type":"DELETE","lineNumber":86,"oldContent":"            for (int i = 0; i < 3; i++)"},{"type":"DELETE","lineNumber":87,"oldContent":"            {"},{"type":"DELETE","lineNumber":88,"oldContent":"                Console.Write(\" \");"},{"type":"DELETE","lineNumber":89,"oldContent":"                for (int j = 0; j < 3; j++)"},{"type":"DELETE","lineNumber":90,"oldContent":"                {"},{"type":"DELETE","lineNumber":91,"oldContent":"                    Console.Write(cells[i, j]);"},{"type":"DELETE","lineNumber":92,"oldContent":"                    if (j < 2) Console.Write(\" | \");"},{"type":"DELETE","lineNumber":93,"oldContent":"                }"},{"type":"DELETE","lineNumber":94,"oldContent":"                Console.WriteLine();"},{"type":"DELETE","lineNumber":95,"oldContent":"                if (i < 2) Console.WriteLine(\"---|---|---\");"},{"type":"DELETE","lineNumber":96,"oldContent":"            }"},{"type":"DELETE","lineNumber":97,"oldContent":"            Console.WriteLine();"},{"type":"DELETE","lineNumber":98,"oldContent":"        }"},{"type":"DELETE","lineNumber":99,"oldContent":"    }"},{"type":"DELETE","lineNumber":100,"oldContent":"}"},{"type":"DELETE","lineNumber":101,"oldContent":""},{"type":"DELETE","lineNumber":102,"oldContent":"// Move.cs"},{"type":"DELETE","lineNumber":103,"oldContent":"namespace TrisGame"},{"type":"DELETE","lineNumber":104,"oldContent":"{"},{"type":"DELETE","lineNumber":105,"oldContent":"    public struct Move"},{"type":"DELETE","lineNumber":106,"oldContent":"    {"},{"type":"DELETE","lineNumber":107,"oldContent":"        public int Row { get; set; }"},{"type":"DELETE","lineNumber":108,"oldContent":"        public int Col { get; set; }"},{"type":"DELETE","lineNumber":109,"oldContent":""},{"type":"DELETE","lineNumber":110,"oldContent":"        public Move(int row, int col)"},{"type":"DELETE","lineNumber":111,"oldContent":"        {"},{"type":"DELETE","lineNumber":112,"oldContent":"            Row = row;"},{"type":"DELETE","lineNumber":113,"oldContent":"            Col = col;"},{"type":"DELETE","lineNumber":114,"oldContent":"        }"},{"type":"DELETE","lineNumber":115,"oldContent":"    }"},{"type":"DELETE","lineNumber":116,"oldContent":""},{"type":"DELETE","lineNumber":117,"oldContent":"    public interface IPlayer"},{"type":"DELETE","lineNumber":118,"oldContent":"    {"},{"type":"DELETE","lineNumber":119,"oldContent":"        char Symbol { get; }"},{"type":"DELETE","lineNumber":120,"oldContent":"        Move GetNextMove(Board board);"},{"type":"DELETE","lineNumber":121,"oldContent":"    }"},{"type":"DELETE","lineNumber":122,"oldContent":"}"},{"type":"DELETE","lineNumber":123,"oldContent":""},{"type":"DELETE","lineNumber":124,"oldContent":"// Human.cs"},{"type":"DELETE","lineNumber":125,"oldContent":"namespace TrisGame"},{"type":"DELETE","lineNumber":126,"oldContent":"{"},{"type":"DELETE","lineNumber":127,"oldContent":"    public class Human : IPlayer"},{"type":"DELETE","lineNumber":128,"oldContent":"    {"},{"type":"DELETE","lineNumber":129,"oldContent":"        public char Symbol { get; private set; }"},{"type":"DELETE","lineNumber":130,"oldContent":""},{"type":"DELETE","lineNumber":131,"oldContent":"        public Human(char symbol)"},{"type":"DELETE","lineNumber":132,"oldContent":"        {"},{"type":"DELETE","lineNumber":133,"oldContent":"            Symbol = symbol;"},{"type":"DELETE","lineNumber":134,"oldContent":"        }"},{"type":"DELETE","lineNumber":135,"oldContent":""},{"type":"DELETE","lineNumber":136,"oldContent":"        public Move GetNextMove(Board board)"},{"type":"DELETE","lineNumber":137,"oldContent":"        {"},{"type":"DELETE","lineNumber":138,"oldContent":"            while (true)"},{"type":"DELETE","lineNumber":139,"oldContent":"            {"},{"type":"DELETE","lineNumber":140,"oldContent":"                Console.Write($\"Player {Symbol} - enter row and column (0-2): \");"},{"type":"DELETE","lineNumber":141,"oldContent":"                var input = Console.ReadLine()?.Split();"},{"type":"DELETE","lineNumber":142,"oldContent":"                "},{"type":"DELETE","lineNumber":143,"oldContent":"                if (input?.Length == 2 && "},{"type":"DELETE","lineNumber":144,"oldContent":"                    int.TryParse(input[0], out int row) && "},{"type":"DELETE","lineNumber":145,"oldContent":"                    int.TryParse(input[1], out int col) &&"},{"type":"DELETE","lineNumber":146,"oldContent":"                    board.IsEmpty(row, col))"},{"type":"DELETE","lineNumber":147,"oldContent":"                {"},{"type":"DELETE","lineNumber":148,"oldContent":"                    return new Move(row, col);"},{"type":"DELETE","lineNumber":149,"oldContent":"                }"},{"type":"DELETE","lineNumber":150,"oldContent":"                "},{"type":"DELETE","lineNumber":151,"oldContent":"                Console.WriteLine(\"Invalid move, try again.\");"},{"type":"DELETE","lineNumber":152,"oldContent":"            }"},{"type":"DELETE","lineNumber":153,"oldContent":"        }"},{"type":"DELETE","lineNumber":154,"oldContent":"    }"},{"type":"DELETE","lineNumber":155,"oldContent":"}"},{"type":"DELETE","lineNumber":156,"oldContent":""},{"type":"DELETE","lineNumber":157,"oldContent":"// Computer.cs"},{"type":"DELETE","lineNumber":158,"oldContent":"namespace TrisGame"},{"type":"DELETE","lineNumber":159,"oldContent":"{"}]}]},"C:/Users/tagli/RiderProjects/TrisGame/TrisGame/IPlayer.cs":{"filePath":"C:/Users/tagli/RiderProjects/TrisGame/TrisGame/IPlayer.cs","baseContent":"namespace TrisGame;\n\npublic interface IPlayer\n{\n    char Symbol { get; }\n    Move GetNextMove(Board board);\n}","baseTimestamp":1756986222866},"/Dummy.conventionalcommit":{"filePath":"/Dummy.conventionalcommit","baseContent":"feat: fist","baseTimestamp":1756987732634,"deltas":[{"timestamp":1756987739876,"changes":[{"type":"MODIFY","lineNumber":0,"content":"feat: first","oldContent":"feat: fist"}]}]}}}